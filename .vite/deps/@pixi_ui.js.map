{
  "version": 3,
  "sources": ["../../node_modules/@pixi/ui/src/ButtonEvents.ts", "../../node_modules/@pixi/ui/src/Button.ts", "../../node_modules/@pixi/ui/src/utils/helpers/view.ts", "../../node_modules/@pixi/ui/src/Switcher.ts", "../../node_modules/@pixi/ui/src/utils/helpers/cleanup.ts", "../../node_modules/@pixi/ui/src/CheckBox.ts", "../../node_modules/@pixi/ui/src/CircularProgressBar.ts", "../../node_modules/@pixi/ui/src/ProgressBar.ts", "../../node_modules/@pixi/ui/src/SliderBase.ts", "../../node_modules/@pixi/ui/src/DoubleSlider.ts", "../../node_modules/tweedle.js/src/Now.ts", "../../node_modules/tweedle.js/src/Group.ts", "../../node_modules/tweedle.js/src/Easing.ts", "../../node_modules/tweedle.js/src/Interpolation.ts", "../../node_modules/tweedle.js/src/Sequence.ts", "../../node_modules/tweedle.js/src/Defaults.ts", "../../node_modules/tweedle.js/src/Tween.ts", "../../node_modules/tweedle.js/src/Version.ts", "../../node_modules/@pixi/ui/src/utils/helpers/fit.ts", "../../node_modules/@pixi/ui/src/utils/helpers/text.ts", "../../node_modules/@pixi/ui/src/FancyButton.ts", "../../node_modules/@pixi/ui/src/Input.ts", "../../node_modules/@pixi/ui/src/List.ts", "../../node_modules/@pixi/ui/src/MaskedFrame.ts", "../../node_modules/@pixi/ui/src/RadioGroup.ts", "../../node_modules/@pixi/ui/src/utils/trackpad/Spring.ts", "../../node_modules/@pixi/ui/src/utils/trackpad/ScrollSpring.ts", "../../node_modules/@pixi/ui/src/utils/trackpad/SlidingNumber.ts", "../../node_modules/@pixi/ui/src/utils/trackpad/Trackpad.ts", "../../node_modules/@pixi/ui/src/ScrollBox.ts", "../../node_modules/@pixi/ui/src/Select.ts", "../../node_modules/@pixi/ui/src/Slider.ts"],
  "sourcesContent": ["import { Container, FederatedPointerEvent, isMobile } from 'pixi.js';\nimport { Signal } from 'typed-signals';\n\n/** Events controller used for {@link Button}. */\nexport class ButtonEvents\n{\n    protected _isMouseIn: boolean;\n    protected _isDown: boolean;\n\n    /** Event that is fired when the button is down. */\n    onDown: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when a down event happened inside the button\n     * and up event happened inside or outside of the button\n     */\n    onUp: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when mouse up event happens outside of the button\n     * after the down event happened inside the button boundaries.\n     */\n    onUpOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that fired when the mouse is out of the view */\n    onOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the button is pressed. */\n    onPress: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the mouse hovers the button. Fired only if device is not mobile.*/\n    onHover: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    constructor()\n    {\n        this.onPress = new Signal();\n        this.onDown = new Signal();\n        this.onUp = new Signal();\n        this.onHover = new Signal();\n        this.onOut = new Signal();\n        this.onUpOut = new Signal();\n    }\n\n    protected connectEvents(view: Container)\n    {\n        if (isMobile.any)\n        {\n            view.on('pointerdown', this.processDown, this);\n            view.on('pointerup', this.processUp, this);\n            view.on('pointerupoutside', this.processUpOut, this);\n            view.on('pointerout', this.processOut, this);\n            view.on('pointertap', this.processPress, this);\n            view.on('pointerover', this.processOver, this);\n        }\n        else\n        {\n            view.on('mousedown', this.processDown, this);\n            view.on('mouseup', this.processUp, this);\n            view.on('mouseupoutside', this.processUpOut, this);\n            view.on('mouseout', this.processOut, this);\n            view.on('click', this.processPress, this);\n            view.on('mouseover', this.processOver, this);\n        }\n    }\n\n    protected disconnectEvents(view: Container)\n    {\n        if (isMobile.any)\n        {\n            view.off('pointerdown', this.processDown, this);\n            view.off('pointerup', this.processUp, this);\n            view.off('pointerupoutside', this.processUpOut, this);\n            view.off('pointerout', this.processOut, this);\n            view.off('pointertap', this.processPress, this);\n            view.off('pointerover', this.processOver, this);\n        }\n        else\n        {\n            view.off('mousedown', this.processDown, this);\n            view.off('mouseup', this.processUp, this);\n            view.off('mouseupoutside', this.processUpOut, this);\n            view.off('mouseout', this.processOut, this);\n            view.off('click', this.processPress, this);\n            view.off('mouseover', this.processOver, this);\n        }\n    }\n\n    protected processDown(e: FederatedPointerEvent): void\n    {\n        this._isDown = true;\n        this.onDown.emit(this, e);\n        this.down(e);\n    }\n\n    protected processUp(e?: FederatedPointerEvent)\n    {\n        if (this._isDown)\n        {\n            this.onUp.emit(this, e);\n            this.up(e);\n        }\n\n        this._isDown = false;\n    }\n\n    protected processUpOut(e?: FederatedPointerEvent)\n    {\n        if (this._isDown)\n        {\n            this.onUp.emit(this, e);\n            this.onUpOut.emit(this, e);\n            this.up(e);\n            this.upOut(e);\n        }\n\n        this._isDown = false;\n    }\n\n    protected processOut(e?: FederatedPointerEvent)\n    {\n        if (this._isMouseIn)\n        {\n            this._isMouseIn = false;\n            this.onOut.emit(this, e);\n            this.out(e);\n        }\n    }\n\n    protected processPress(e: FederatedPointerEvent)\n    {\n        this._isDown = false;\n        this.onPress.emit(this, e);\n        this.press(e);\n    }\n\n    protected processOver(e: FederatedPointerEvent)\n    {\n        if (isMobile.any) return;\n\n        this._isMouseIn = true;\n        this.onHover.emit(this, e);\n        this.hover(e);\n    }\n\n    /**\n     * Method called when the button pressed.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    down(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the button is up.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    up(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the up event happens outside of the button,\n     * after the down event happened inside the button boundaries.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    upOut(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse leaves the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    out(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse press down the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    press(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse hovers the button.\n     * To be overridden.\n     * Fired only if device is not mobile.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    hover(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /** Getter that returns if the button is down. */\n    get isDown(): boolean\n    {\n        return this._isDown;\n    }\n}\n", "import { Container, FederatedPointerEvent } from 'pixi.js';\nimport { Signal } from 'typed-signals';\nimport { ButtonEvents } from './ButtonEvents';\n\n/**\n * Adds button events to a given container-based view\n *\n * so you can subscribe to them and use your container-based instance as a button.\n * @example\n * const container = new Container();\n * const button = new Button(\n *      new Graphics()\n *          .rect(0, 0, 100, 50, 15)\n *          .fill(0xFFFFFF)\n * );\n *\n * button.onPress.connect(() => console.log('onPress'));\n *\n * container.addChild(button.view);\n */\nexport class Button extends ButtonEvents\n{\n    /** Container, given as a constructor parameter that is a button view. */\n    protected _view: Container;\n\n    /**\n     * Turns a given container-based view into a button by adding all button events.\n     * @param {Container} view - instance of container, to be turned into button.\n     */\n    constructor(view?: Container)\n    {\n        super();\n\n        if (view)\n        {\n            this.view = view;\n            this.enabled = true;\n        }\n    }\n\n    /** Set button view, that all the interaction events are applied to. */\n    set view(view: Container)\n    {\n        const wasItInitiated = !!this._view;\n\n        if (wasItInitiated) this.disconnectEvents(this._view);\n\n        this._view = view;\n        this.connectEvents(this._view);\n    }\n\n    /** Get button view, thar all the interaction events are applied to. */\n    get view(): Container\n    {\n        return this._view;\n    }\n\n    /**\n     * Switcher, which prevents all button events from firing if off.\n     * @param {boolean} enabled\n     */\n    set enabled(enabled: boolean)\n    {\n        if (!this.view)\n        {\n            console.error('Button view is not set. Please set it before enabling the button.');\n\n            return;\n        }\n\n        this.view.eventMode = enabled ? 'static' : 'auto';\n        this.view.cursor = enabled ? 'pointer' : 'default';\n\n        if (!enabled && this.isDown)\n        {\n            this.processUp();\n        }\n    }\n\n    /** Getter that returns button state. */\n    get enabled(): boolean\n    {\n        return this.view.eventMode === 'static';\n    }\n}\n\n/**\n * Button based on container. You can use it same {@link Button}\n * but without need to pre create a container and interact with it through `.view` accessor.\n * @example\n * const button = new ButtonContainer(\n *      new Graphics()\n *          .fill(0xFFFFFF)\n *          .roundRect(0, 0, 100, 50, 15)\n * );\n *\n * button.onPress.connect(() => console.log('onPress'));\n *\n * container.addChild(button);\n */\nexport class ButtonContainer extends Container\n{\n    button: Button;\n\n    onDown: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onUp: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onUpOut: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onOut: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onPress: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onHover: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n\n    constructor(view?: Container)\n    {\n        super();\n\n        this.button = new Button(this);\n\n        this.button.enabled = true;\n\n        if (view)\n        {\n            this.addChild(view);\n        }\n\n        this.onPress = this.button.onPress;\n        this.onDown = this.button.onDown;\n        this.onUp = this.button.onUp;\n        this.onHover = this.button.onHover;\n        this.onOut = this.button.onOut;\n        this.onUpOut = this.button.onUpOut;\n    }\n\n    set enabled(enabled: boolean)\n    {\n        this.button.enabled = enabled;\n    }\n\n    get enabled(): boolean\n    {\n        return this.button.enabled;\n    }\n}\n", "import { Container, Sprite } from 'pixi.js';\n\nexport function getView(view: string | Container): Container\n{\n    if (typeof view === 'string')\n    {\n        return Sprite.from(view);\n    }\n\n    return view;\n}\n\nexport function getSpriteView(view: string | Sprite): Sprite\n{\n    if (typeof view === 'string')\n    {\n        return Sprite.from(view);\n    }\n\n    return view;\n}\n", "import { Container } from 'pixi.js';\nimport { Signal } from 'typed-signals';\nimport { getView } from './utils/helpers/view';\nimport { ButtonEvent } from './utils/HelpTypes';\n\n/**\n * Container based component that switches visibility of a given containers by any of the interaction events.\n *\n * By default it switches on press.\n *\n * Can be used for creating buttons, tabs, radio buttons, checkboxes etc.\n * @example\n * // switch on onPress\n * const switch = new Swich([`switch_off.png`, `switch_on.png`]);\n *\n * // switch on hover\n * const button = new Swich([`button_default.png`, `button_hover.png`], ['onHover', 'onOut']);\n *\n * button.events.onPress.connect(() => console.log('button pressed'));\n */\nexport class Switcher extends Container\n{\n    protected _triggerEvents: Set<ButtonEvent> = new Set(['onPress']);\n\n    /** Container that holds all the content of the component. */\n    innerView: Container;\n\n    /** The id of the visible(active) view. */\n    protected _active: number;\n\n    /** Fired when active view changes. */\n    onChange: Signal<(state: number | boolean) => void>;\n\n    /**\n     * @param {Array<Container | string>} views - Array of views or textures that will be switching.\n     * @param triggerEvents - Button events, to switch views (can be one event or an array of events).\n     * @param activeViewID - The id of the view, visible by default.\n     */\n    constructor(views?: Array<Container | string>, triggerEvents?: ButtonEvent | ButtonEvent[], activeViewID?: number)\n    {\n        super();\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.onChange = new Signal();\n\n        if (views) this.views = views;\n        if (triggerEvents) this.triggerEvents = triggerEvents;\n        if (activeViewID && this.views.length > 0) this.active = activeViewID;\n\n        this.setInteractionEvents();\n    }\n\n    protected setInteractionEvents()\n    {\n        this.innerView.eventMode = 'static';\n\n        this.innerView.on('pointerdown', () => this.handleEvents('onDown'));\n        this.innerView.on('pointerup', () => this.handleEvents('onUp'));\n        this.innerView.on('pointerupoutside', () => this.handleEvents('onUpOut'));\n        this.innerView.on('pointerout', () => this.handleEvents('onOut'));\n        this.innerView.on('pointertap', () => this.handleEvents('onPress'));\n        this.innerView.on('pointerover', () => this.handleEvents('onHover'));\n    }\n\n    protected handleEvents(event: ButtonEvent)\n    {\n        if (this._triggerEvents.has(event))\n        {\n            this.switch();\n        }\n    }\n\n    /** Returns the active view. */\n    get activeView(): Container | undefined\n    {\n        if (this.views && this.views[this.active])\n        {\n            return this.views[this.active] as Container;\n        }\n\n        return undefined;\n    }\n\n    /** Sets the list of instances for switching. */\n    set views(views: Array<Container | string>)\n    {\n        this.innerView.removeChildren();\n        views.forEach((stateView) => this.add(stateView));\n    }\n\n    /** Returns all the switchable views */\n    get views(): Array<Container>\n    {\n        return this.innerView.children as Array<Container>;\n    }\n\n    /**\n     * Adds view instance to a switching list.\n     * @param view\n     */\n    add(view: Container | string): void\n    {\n        const viewInstance = getView(view);\n\n        this.innerView.addChild(viewInstance);\n\n        viewInstance.visible = false;\n\n        if (this.views.length === 1)\n        {\n            this.active = 0;\n        }\n    }\n\n    /**\n     * Removes view instance from a switching list by id.\n     * @param id - id of the view to remove.\n     */\n    remove(id: number)\n    {\n        if (this.views[id])\n        {\n            this.innerView.removeChild(this.views[id]);\n        }\n    }\n\n    /**\n     * Sets a list of events that will make a switcher switch to the next view.\n     * @param {ButtonEvent | ButtonEvent[]} triggerEvents - Button events,\n     * to switch views (can be one event or an array of events).\n     */\n    set triggerEvents(triggerEvents: ButtonEvent | ButtonEvent[])\n    {\n        this._triggerEvents = new Set(Array.isArray(triggerEvents) ? triggerEvents : [triggerEvents]);\n    }\n\n    /** Returns a list of events that will make a switcher switch to the next view. */\n    get triggerEvents(): ButtonEvent[]\n    {\n        return Array.from(this._triggerEvents);\n    }\n\n    /**\n     * Show a view by id, or to next one by order, if no ID provided.\n     * @param {number} id - optional id of the view to show. If not set, will switch to the next view.\n     */\n    switch(id?: number)\n    {\n        if (id !== undefined && id === this.active) return;\n\n        const exID = this.active;\n\n        this.forceSwitch(id);\n\n        if (exID !== this.active)\n        {\n            const res = this.views.length > 2 ? this.active : this.active === 1;\n\n            this.onChange.emit(res);\n        }\n    }\n\n    /**\n     * Switches a view to a given one without triggering the onChange event.\n     * @param {number} id - optional id of the view to show. If not set, will switch to the next view.\n     */\n    forceSwitch(id?: number)\n    {\n        if (id !== undefined && id === this.active) return;\n\n        if (this.activeView)\n        {\n            this.activeView.visible = false;\n        }\n\n        if (id !== undefined && !this.views[id])\n        {\n            throw new Error(`View with id ${id} does not exist.`);\n        }\n\n        this._active = id !== undefined ? id : this.nextActive;\n\n        if (this._active === undefined)\n        {\n            return;\n        }\n\n        this.views[this.active].visible = true;\n    }\n\n    /** Returns the id of the next view in order. Or undefined, if order is empty. */\n    protected get nextActive(): number | undefined\n    {\n        if (this.views.length === 0) return undefined;\n\n        return this.active < this.views.length - 1 ? this.active + 1 : 0;\n    }\n\n    /** Sets the id of the visible(active) view and shows to it. */\n    set active(id: number)\n    {\n        this.switch(id);\n    }\n\n    /** Gets the id of the visible(active) view. */\n    get active(): number\n    {\n        return this._active;\n    }\n}\n", "import { Container } from 'pixi.js';\n\nexport function cleanup(element: Container)\n{\n    if (!element) return;\n\n    if (element.parent)\n    {\n        element.parent.removeChild(element);\n    }\n\n    element.destroy();\n    element = null;\n}\n", "import { Container, Text } from 'pixi.js';\nimport { Signal } from 'typed-signals';\nimport { Switcher } from './Switcher';\nimport { cleanup } from './utils/helpers/cleanup';\nimport { PixiText, PixiTextClass, PixiTextStyle } from './utils/helpers/text';\nimport { getView } from './utils/helpers/view';\n\ntype CheckBoxStyle = {\n    checked: Container | string;\n    unchecked: Container | string;\n    text?: PixiTextStyle;\n    textOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\nexport type CheckBoxOptions = {\n    style: CheckBoxStyle;\n    text?: string;\n    TextClass?: PixiTextClass;\n    checked?: boolean;\n};\n\n/**\n * Creates a container-based checkbox element.\n * @example\n *  new CheckBox({\n *     style: {\n *         unchecked: `switch_off.png`,\n *         checked: `switch_on.png`,\n *     }\n *  });\n */\nexport class CheckBox extends Switcher\n{\n    //* Text label */\n    labelText!: PixiText;\n\n    /** Signal emitted when checkbox state changes. */\n    onCheck: Signal<(state: boolean) => void>;\n\n    protected _style: CheckBoxStyle;\n    protected _textClass: PixiTextClass;\n\n    constructor(options: CheckBoxOptions)\n    {\n        super();\n\n        this._textClass = options.TextClass ?? Text;\n        this.text = options.text;\n\n        this.style = options.style;\n\n        this.checked = options.checked;\n\n        this.triggerEvents = ['onPress'];\n\n        this.innerView.cursor = 'pointer';\n\n        this.onCheck = new Signal();\n\n        this.onChange.connect(() => this.onCheck.emit(this.checked));\n    }\n\n    protected addLabel(text?: string, style?: PixiTextStyle)\n    {\n        if (!text) return;\n\n        this.labelText = new this._textClass({\n            text: text ?? '',\n            style: style ?? this._style?.text,\n        });\n        this.addChild(this.labelText);\n\n        this.labelText.cursor = 'pointer';\n        this.labelText.eventMode = 'static';\n        this.labelText.on('pointertap', () => (this.checked = !this.checked));\n    }\n\n    /** Setter, which sets a checkbox text. */\n    set text(text: string)\n    {\n        if (!text)\n        {\n            cleanup(this.labelText);\n\n            return;\n        }\n\n        this.labelText ? (this.labelText.text = text) : this.addLabel(text);\n    }\n\n    /** Getter, which returns a checkbox text. */\n    get text(): string | ''\n    {\n        return this.labelText?.text ?? '';\n    }\n\n    /** Setter, which sets a checkbox style settings. */\n    set style(style: CheckBoxStyle)\n    {\n        // Preserve checked state for the end of the method\n        const wasChecked = this.checked;\n\n        this._style = style;\n\n        const { unchecked, checked } = style;\n\n        const uncheckedView = getView(unchecked);\n        const checkedView = getView(checked);\n\n        this.views = [uncheckedView, checkedView];\n\n        if (wasChecked)\n        {\n            checkedView.visible = true;\n            this.active = 1;\n        }\n        else\n        {\n            uncheckedView.visible = true;\n        }\n\n        if (this.labelText)\n        {\n            checkedView.visible = true;\n            this.active = 1;\n            if (style.text)\n            {\n                this.labelText.style = style.text;\n            }\n\n            this.labelText.x = uncheckedView.width + 10 + (style.textOffset?.x ?? 0);\n            this.labelText.y = ((uncheckedView.height - this.labelText.height) / 2) + (style.textOffset?.y ?? 0);\n        }\n        else\n        {\n            uncheckedView.visible = true;\n        }\n    }\n\n    /** Getter, which returns a checkbox style settings. */\n    get style(): CheckBoxStyle\n    {\n        return this._style;\n    }\n\n    /** Getter, which returns a checkbox state. */\n    get checked(): boolean\n    {\n        return this.active === 1;\n    }\n\n    /** Setter, which sets a checkbox state. */\n    set checked(checked: boolean)\n    {\n        this.switch(checked ? 1 : 0);\n    }\n\n    /**\n     * Setter, that sets a checkbox state without emitting a signal.\n     * @param checked\n     */\n    forceCheck(checked: boolean)\n    {\n        this.forceSwitch(checked ? 1 : 0);\n    }\n}\n", "import { ColorSource, Container, DEG_TO_RAD, Graphics, LineCap } from 'pixi.js';\n\nexport type MaskedProgressBarOptions = {\n    backgroundColor?: ColorSource;\n    fillColor: ColorSource;\n    lineWidth: number;\n    radius: number;\n    value?: number;\n    backgroundAlpha?: number;\n    fillAlpha?: number;\n    cap?: LineCap;\n};\n\n/**\n * Creates a Circular ProgressBar.\n * @example\n * const progressBar = new CircularProgressBar({\n *    backgroundColor: 0x000000,\n *    backgroundAlpha: 0.5,\n *    lineWidth: 10,\n *    fillColor: 0xFFFFFF,\n *    radius: 50,\n *    value: 50,\n *    cap: 'round'\n * });\n *\n * progressBar.progress = 100;\n */\nexport class CircularProgressBar extends Container\n{\n    private _progress = 0;\n    private options: MaskedProgressBarOptions;\n\n    private bgCircle = new Graphics();\n    private fillCircle = new Graphics();\n\n    /** Container, that holds all inner views. */\n    innerView = new Container();\n\n    /**\n     * Creates a Circular ProgressBar.\n     * @param { number } options - Options object to use.\n     * @param { ColorSource } options.backgroundColor - Background color.\n     * @param { ColorSource } options.fillColor - Fill color.\n     * @param { number } options.lineWidth - Line width.\n     * @param { number } options.radius - Radius.\n     * @param { number } options.value - Progress value.\n     * @param { number } options.backgroundAlpha - Background alpha.\n     * @param { number } options.fillAlpha - Fill alpha.\n     * @param { 'butt' | 'round' | 'square' } options.cap - Line cap.\n     */\n    constructor(options?: MaskedProgressBarOptions)\n    {\n        super();\n\n        this.options = options;\n\n        this.addChild(this.innerView);\n\n        this.innerView.addChild(this.bgCircle, this.fillCircle);\n\n        this.addBackground();\n\n        if (options.value)\n        {\n            this.progress = options.value;\n        }\n    }\n\n    private addBackground()\n    {\n        const {\n            backgroundColor,\n            lineWidth,\n            radius,\n            backgroundAlpha,\n        } = this.options;\n\n        let alpha = 1;\n\n        if (backgroundAlpha > 0)\n        {\n            alpha = backgroundAlpha;\n        }\n\n        if (backgroundColor === undefined)\n        {\n            alpha = 0.000001;\n        }\n\n        this.bgCircle\n            .circle(0, 0, radius)\n            .stroke({\n                width: lineWidth,\n                color: backgroundColor,\n                alpha\n            });\n    }\n\n    /**\n     * Set progress value.\n     * @param { number } value - Progress value.\n     */\n    set progress(value: number)\n    {\n        if (value > 100)\n        {\n            value = 100;\n        }\n\n        if (value < 0)\n        {\n            value = 0;\n        }\n\n        this._progress = value;\n\n        const {\n            lineWidth,\n            radius,\n            fillColor,\n            fillAlpha,\n            cap\n        } = this.options;\n\n        if (value === 0 && fillAlpha === 0)\n        {\n            this.fillCircle.clear();\n\n            return;\n        }\n\n        const startAngle = 0;\n        const endAngle = 360 / 100 * value;\n\n        this.fillCircle\n            .clear()\n            .arc(0, 0, radius, (0 - 90 + startAngle) * DEG_TO_RAD, (0 - 90 + startAngle + endAngle) * DEG_TO_RAD)\n            .stroke({\n                width: lineWidth,\n                color: fillColor,\n                cap,\n                alpha: fillAlpha\n            });\n    }\n\n    /**\n     * Current progress value.\n     * @returns { number } - Progress value.\n     */\n    get progress(): number\n    {\n        return this._progress;\n    }\n}\n", "import { Container, Graphics, NineSliceSprite as PixiNineSliceSprite, Optional, Size, Sprite, Texture } from 'pixi.js';\nimport { getSpriteView } from './utils/helpers/view';\n\ntype FillPaddings = {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n};\n\nexport type ProgressBarViewType = Sprite | Graphics | string;\nexport type NineSliceSprite = {\n    bg: [number, number, number, number],\n    fill: [number, number, number, number]\n};\n\nexport type ProgressBarOptions = {\n    bg: ProgressBarViewType;\n    fill: ProgressBarViewType;\n    fillPaddings?: FillPaddings;\n    nineSliceSprite?: NineSliceSprite,\n    progress?: number;\n};\n\n/**\n * Creates a ProgressBar.\n * @example\n * new ProgressBar({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     progress: 50,\n * });\n */\nexport class ProgressBar extends Container\n{\n    protected bg!: Sprite | PixiNineSliceSprite | Graphics;\n    protected fill!: Sprite | PixiNineSliceSprite | Graphics;\n    protected fillMask!: PixiNineSliceSprite | Graphics;\n    protected progressStart = 0;\n    protected _progress = 0;\n\n    protected options: ProgressBarOptions;\n\n    /** Container, that holds all inner views. */\n    innerView: Container;\n\n    /** Container, given as a constructor parameter that is a button view. */\n    protected _view: Container;\n\n    /**\n     * Creates a ProgressBar.\n     * @param options - Options.\n     * @param { Sprite | Graphics | string } options.bg - Background of the ProgressBar.\n     * @param { Sprite | Graphics | string } options.fill - Fill of the ProgressBar.\n     * @param { FillPaddings } options.fillPaddings - Fill offsets.\n     * @param { number } options.fillPaddings.top - Fill top offset.\n     * @param { number } options.fillPaddings.right - Fill right offset.\n     * @param { number } options.fillPaddings.bottom - Fill bottom offset.\n     * @param { number } options.fillPaddings.left - Fill left offset.\n     * @param { NineSliceSprite } options.nineSliceSprite - NineSliceSprite values for bg and fill.\n     * @param { Array } options.nineSliceSprite.bg - NineSliceSprite config for bg ([number, number, number, number]).\n     * @param { Array } options.nineSliceSprite.fill - NineSliceSprite config fill ([number, number, number, number]).\n     * @param { number } options.progress - Initial progress value.\n     */\n    constructor(options?: ProgressBarOptions)\n    {\n        super();\n\n        this.options = options;\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        if (options?.bg && options?.fill)\n        {\n            this.init(options);\n        }\n    }\n\n    /**\n     * Initialize ProgressBar.\n     * @param root0\n     * @param root0.bg - Background texture.\n     * @param root0.fill - Fill texture.\n     * @param root0.fillPaddings - Fill offset.\n     * @param root0.progress - Initial progress value.\n     */\n    init({ bg, fill, fillPaddings, progress }: ProgressBarOptions)\n    {\n        this.setBackground(bg);\n\n        this.setFill(fill, fillPaddings);\n\n        this.progress = progress;\n    }\n\n    /**\n     * Set bg.\n     * @param bg\n     */\n    setBackground(bg: ProgressBarViewType)\n    {\n        if (this.bg)\n        {\n            this.bg.destroy();\n        }\n\n        if (this.options?.nineSliceSprite)\n        {\n            if (typeof bg === 'string')\n            {\n                this.bg = new PixiNineSliceSprite({\n                    texture: Texture.from(bg),\n                    leftWidth: this.options.nineSliceSprite.bg[0],\n                    topHeight: this.options.nineSliceSprite.bg[1],\n                    rightWidth: this.options.nineSliceSprite.bg[2],\n                    bottomHeight: this.options.nineSliceSprite.bg[3],\n                });\n            }\n            else\n            {\n                console.warn('NineSliceSprite can not be used with views set as Container.');\n            }\n        }\n\n        if (bg instanceof Graphics)\n        {\n            this.bg = bg;\n        }\n\n        if (!this.bg && (typeof bg === 'string' || bg instanceof Sprite))\n        {\n            this.bg = getSpriteView(bg);\n        }\n\n        this.innerView.addChildAt(this.bg, 0);\n    }\n\n    /**\n     * Set fill.\n     * @param fill\n     * @param fillPadding\n     */\n    setFill(fill: ProgressBarViewType, fillPadding?: FillPaddings)\n    {\n        if (this.fill)\n        {\n            this.fill.destroy();\n        }\n\n        // in case if user is trying to use same instance for bg and fill\n        if (this.bg instanceof Sprite && fill === this.bg)\n        {\n            console.warn('Can not use same Sprite instance for bg and fill.');\n\n            return;\n        }\n\n        if (this.options?.nineSliceSprite)\n        {\n            if (typeof fill === 'string')\n            {\n                this.fill = new PixiNineSliceSprite({\n                    texture: Texture.from(fill),\n                    leftWidth: this.options.nineSliceSprite.fill[0],\n                    topHeight: this.options.nineSliceSprite.fill[1],\n                    rightWidth: this.options.nineSliceSprite.fill[2],\n                    bottomHeight: this.options.nineSliceSprite.fill[3],\n                });\n            }\n            else\n            {\n                console.warn('NineSliceSprite can not be used with views set as Container.');\n            }\n        }\n\n        if (!this.fill)\n        {\n            if (fill instanceof Graphics)\n            {\n                this.fill = fill;\n            }\n            else\n            {\n                this.fill = getSpriteView(fill);\n            }\n        }\n\n        this.innerView.addChildAt(this.fill, 1);\n\n        const offsetX = fillPadding?.left ?? 0;\n        const offsetY = fillPadding?.top ?? 0;\n\n        this.fill.x = offsetX;\n        this.fill.y = offsetY;\n\n        if (this.fillMask)\n        {\n            this.fill.mask = null;\n            this.fillMask.destroy();\n        }\n\n        const leftWidth = this.fill.width / 2;\n        const rightWidth = this.fill.width / 2;\n        const topHeight = this.fill.height / 2;\n        const bottomHeight = this.fill.height / 2;\n\n        let texture: Texture = Texture.WHITE;\n\n        if (this.fill instanceof Sprite && this.fill.texture)\n        {\n            texture = this.fill.texture;\n        }\n\n        this.fillMask = new PixiNineSliceSprite({ texture, leftWidth, topHeight, rightWidth, bottomHeight });\n        this.fillMask.position.copyFrom(this.fill);\n\n        this.addChild(this.fillMask);\n        this.fill.mask = this.fillMask;\n    }\n\n    protected validate(progress: number): number\n    {\n        progress = Math.round(progress);\n\n        if (progress < 0)\n        {\n            return 0;\n        }\n\n        if (progress > 100)\n        {\n            return 100;\n        }\n\n        return progress;\n    }\n\n    /** Set current progress percentage value. */\n    set progress(progress: number)\n    {\n        this._progress = this.validate(progress);\n\n        if (!this.fill) return;\n\n        if (this.fillMask)\n        {\n            this.fill.mask = null;\n            this.fillMask.width = (this.fill.width / 100 * (this._progress - this.progressStart));\n            this.fillMask.x = (this.progressStart / 100 * this.fill.width) + this.fill.x;\n            this.fillMask.height = this.fill.height;\n            this.fill.mask = this.fillMask;\n        }\n    }\n\n    /** Return current progress percentage value. */\n    get progress(): number\n    {\n        return this._progress;\n    }\n\n    /**\n     * Sets width of a ProgressBars background and fill.\n     * If nineSliceSprite is set, then width will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then width will control components width as Container.\n     * @param width - Width value.\n     */\n    override set width(width: number)\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this.bg)\n            {\n                this.bg.width = width;\n            }\n\n            if (this.fill)\n            {\n                const leftPadding = this.options.fillPaddings?.left ?? 0;\n                const rightPadding = this.options.fillPaddings?.right ?? 0;\n\n                this.fill.width = width - leftPadding - rightPadding;\n                this.fillMask.width = width - leftPadding - rightPadding;\n            }\n\n            this.progress = this._progress;\n        }\n        else\n        {\n            super.width = width;\n        }\n    }\n\n    /** Gets width of a ProgressBar. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a ProgressBars background and fill.\n     * If nineSliceSprite is set, then height will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then height will control components height as Container.\n     * @param height - Height value.\n     */\n    override set height(height: number)\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this.bg)\n            {\n                this.bg.height = height;\n            }\n\n            if (this.fill)\n            {\n                const topPadding = this.options.fillPaddings?.top ?? 0;\n                const bottomPadding = this.options.fillPaddings?.bottom ?? 0;\n\n                this.fill.height = height - topPadding - bottomPadding;\n                this.fillMask.height = height - topPadding - bottomPadding;\n            }\n\n            this.progress = this._progress;\n        }\n        else\n        {\n            super.height = height;\n        }\n    }\n\n    /** Gets height of a ProgressBar. */\n    override get height(): number\n    {\n        return super.height;\n    }\n\n    override setSize(value: number | Optional<Size, 'height'>, height?: number): void\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this.bg)\n            {\n                this.bg.setSize(value, height);\n            }\n\n            if (this.fill)\n            {\n                if (typeof value === 'object')\n                {\n                    height = value.height ?? value.width;\n                    value = value.width;\n                }\n                else\n                {\n                    height = height ?? value;\n                }\n\n                const topPadding = this.options.fillPaddings?.top ?? 0;\n                const bottomPadding = this.options.fillPaddings?.bottom ?? 0;\n                const leftPadding = this.options.fillPaddings?.left ?? 0;\n                const rightPadding = this.options.fillPaddings?.right ?? 0;\n\n                this.fill.setSize(value - leftPadding - rightPadding, height - topPadding - bottomPadding);\n                this.fillMask.setSize(value - leftPadding - rightPadding, height - topPadding - bottomPadding);\n            }\n\n            this.progress = this._progress;\n        }\n        else\n        {\n            super.setSize(value, height);\n        }\n    }\n}\n", "import { Container, FederatedPointerEvent, Sprite, Text } from 'pixi.js';\nimport { ProgressBar, ProgressBarOptions, ProgressBarViewType } from './ProgressBar';\nimport { PixiText, PixiTextClass, PixiTextStyle } from './utils/helpers/text';\nimport { getView } from './utils/helpers/view';\n\nimport type { DragObject } from './utils/HelpTypes';\n\nexport type BaseSliderOptions = ProgressBarOptions & {\n    min?: number;\n    max?: number;\n    valueTextStyle?: PixiTextStyle;\n    valueTextClass?: PixiTextClass;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\nexport type DoubleSliderOptions = BaseSliderOptions & {\n    slider1?: Container | string;\n    slider2?: Container | string;\n\n    value1?: number;\n    value2?: number;\n};\n\n/** Hepper class, used as a base for single or double slider creation. */\nexport class SliderBase extends ProgressBar\n{\n    protected _slider1: Container;\n    protected _slider2: Container;\n\n    protected value1Text?: PixiText;\n    protected value2Text?: PixiText;\n\n    protected _value1: number;\n    protected _value2: number;\n\n    protected dragging = 0;\n\n    /** Minimal value. */\n    protected _min = 0;\n\n    /** Maximal value. */\n    protected _max = 100;\n\n    /** Progress value step */\n    protected _step = 1;\n\n    protected startX!: number;\n    protected startUpdateValue1!: number;\n    protected startUpdateValue2!: number;\n\n    protected settings: DoubleSliderOptions;\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super(options);\n\n        this.settings = options;\n\n        this.slider1 = options.slider1;\n        this.slider2 = options.slider2;\n\n        this.min = options.min ?? 0;\n        this.max = options.max ?? 100;\n    }\n\n    override init(progressBarOptions: ProgressBarOptions)\n    {\n        super.init(progressBarOptions);\n\n        if (this.fill)\n        {\n            this.fill.eventMode = 'none';\n        }\n    }\n\n    /**\n     * Sets Slider1 instance.\n     * @param value - Container or string with texture name.\n     */\n    set slider1(value: Container | string)\n    {\n        if (!value) return;\n\n        if (this._slider1)\n        {\n            this.slider1.removeAllListeners();\n            this.slider1.destroy();\n        }\n\n        this._slider1 = this.createSlider(value);\n\n        if (this.settings.showValue && !this.value1Text)\n        {\n            const TextClass = this.settings.valueTextClass ?? Text;\n\n            this.value1Text = new TextClass({ text: '', style: this.settings.valueTextStyle || { fill: 0xffffff } });\n            this.value1Text.anchor.set(0.5);\n            this.addChild(this.value1Text);\n        }\n    }\n\n    /** Get Slider1 instance. */\n    get slider1(): Container\n    {\n        return this._slider1;\n    }\n\n    /**\n     * Sets Slider2 instance.\n     * @param value - Container or string with texture name.\n     */\n    set slider2(value: Container | string)\n    {\n        if (!value) return;\n\n        if (this._slider2)\n        {\n            this.slider2.removeAllListeners();\n            this.slider2.destroy();\n        }\n\n        this._slider2 = this.createSlider(value);\n\n        if (this.settings.showValue && !this.value2Text)\n        {\n            const TextClass = this.settings.valueTextClass ?? Text;\n\n            this.value2Text = new TextClass({ text: '', style: this.settings.valueTextStyle || { fill: 0xffffff } });\n            this.value2Text.anchor.set(0.5);\n            this.addChild(this.value2Text);\n        }\n    }\n\n    /** Get Slider2 instance. */\n    get slider2(): Container\n    {\n        return this._slider2;\n    }\n\n    /**\n     * Set bg.\n     * @param bg\n     */\n    override setBackground(bg: ProgressBarViewType)\n    {\n        if (this.bg)\n        {\n            this.bg.removeAllListeners();\n        }\n\n        super.setBackground(bg);\n\n        this.activateBG();\n    }\n\n    protected activateBG()\n    {\n        this.bg.eventMode = 'static';\n        this.bg\n            .on('pointerdown', this.startUpdate, this)\n            .on('globalpointermove', this.update, this)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n    }\n\n    protected createSlider(sliderData: Container | string): Container\n    {\n        const slider = getView(sliderData);\n        const onPointerDown = (event: FederatedPointerEvent) =>\n        {\n            // This is needed to do proper calculations in update method calls\n            if (this.bg)\n            {\n                event.currentTarget = this.bg;\n            }\n            this.startUpdate(event);\n        };\n\n        slider.eventMode = 'static';\n        slider.on('pointerdown', onPointerDown)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n        slider.x = slider.width / 2;\n\n        const container = new Container();\n\n        container.addChild(slider);\n\n        if (slider instanceof Sprite)\n        {\n            slider.anchor.set(0.5);\n        }\n\n        container.y = this.bg?.height / 2 ?? 0;\n\n        this.addChild(container);\n\n        return container;\n    }\n\n    protected startUpdate(event: FederatedPointerEvent)\n    {\n        this.dragging = 1;\n\n        const obj = event.currentTarget as DragObject;\n\n        this.startX = obj.parent.worldTransform.applyInverse(event.global).x;\n\n        this.startUpdateValue1 = this._value1;\n        this.startUpdateValue2 = this._value2;\n        this.update(event);\n    }\n\n    protected endUpdate()\n    {\n        if (!this.dragging) return;\n        this.dragging = 0;\n\n        if (!!this.startX || (this.startUpdateValue1 !== this._value1 || this.startUpdateValue2 !== this._value2))\n        {\n            this.change();\n        }\n\n        this.startUpdateValue1 = null;\n        this.startUpdateValue2 = null;\n    }\n\n    protected onClick()\n    {\n        this.change();\n    }\n\n    /* Called when dragging started and on every move. */\n    protected update(_event: FederatedPointerEvent)\n    {\n        const obj = _event.currentTarget as DragObject;\n\n        const { x } = obj.parent.worldTransform.applyInverse(_event.global);\n\n        if (x !== this.startX)\n        {\n            this.startX = null;\n        }\n    }\n\n    /** Called when dragging stopped. */\n    protected change()\n    {\n    // override me\n    }\n\n    /**\n     * Set max value.\n     * @param value\n     */\n    set max(value: number)\n    {\n        this._max = value;\n    }\n\n    /** Get max value. */\n    get max(): number\n    {\n        return this._max;\n    }\n\n    /**\n     * Set min value.\n     * @param value\n     */\n    set min(value: number)\n    {\n        this._min = value;\n    }\n\n    /** Get min value. */\n    get min(): number\n    {\n        return this._min;\n    }\n\n    /**\n     * Set step value.\n     * @param value\n     */\n    set step(value: number)\n    {\n        this._step = value;\n    }\n\n    /** Get step value. */\n    get step(): number\n    {\n        return this._step;\n    }\n}\n", "import { Container, FederatedPointerEvent, Optional, Size } from 'pixi.js';\nimport { Signal } from 'typed-signals';\nimport { DoubleSliderOptions, SliderBase } from './SliderBase';\n\nimport type { DragObject } from './utils/HelpTypes';\n\n/**\n * Creates a slider with range selection option.\n * @example\n * const doubleSlider = new DoubleSlider({\n *      bg: 'slider_bg.png',\n *      fill: 'slider_progress.png',\n *      slider1: 'slider.png',\n *      slider2: 'slider.png',\n *  });\n *\n * doubleSlider.onChange.connect((value1, value2) =>\n *     console.log(`New slider range ${value1} - ${value2}`)S\n * );\n */\n\nexport class DoubleSlider extends SliderBase\n{\n    protected sliderOptions: DoubleSliderOptions;\n\n    protected activeValue: 'value1' | 'value2';\n\n    /** Signal that fires when value have changed. */\n    onChange: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    /** Signal that fires when value is changing. */\n    onUpdate: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super(options);\n\n        this.sliderOptions = options;\n        this.setInitialState();\n    }\n\n    protected setInitialState()\n    {\n        this.validateValues();\n\n        const { value1, value2 } = this.sliderOptions;\n\n        this.updateProgress(value1, value2);\n\n        this.value2 = value2;\n        this.value1 = value1;\n    }\n\n    protected updateProgress(value1 = this.value1, value2 = this.value2)\n    {\n        this.progressStart = ((value1 - this.min) / (this.max - this.min)) * 100;\n        this.progress = ((value2 - this.min) / (this.max - this.min)) * 100;\n    }\n\n    protected validateValues()\n    {\n        if (!this.sliderOptions.value1)\n        {\n            this.sliderOptions.value1 = this.min;\n        }\n\n        if (!this.sliderOptions.value2)\n        {\n            this.sliderOptions.value2 = this.sliderOptions.max;\n        }\n\n        if (this.sliderOptions.value2 < this.sliderOptions.value1)\n        {\n            this.sliderOptions.value2 = this.sliderOptions.value1;\n        }\n\n        if (this.sliderOptions.value1 < this.sliderOptions.min)\n        {\n            this.sliderOptions.value1 = this.sliderOptions.min;\n        }\n\n        if (this.sliderOptions.value1 > this.sliderOptions.max)\n        {\n            this.sliderOptions.value1 = this.sliderOptions.max;\n        }\n\n        if (this.sliderOptions.value2 > this.sliderOptions.max)\n        {\n            this.sliderOptions.value2 = this.sliderOptions.max;\n        }\n    }\n\n    /** Returns left value. */\n    get value1(): number\n    {\n        return this._value1;\n    }\n\n    /** Sets left value. */\n    set value1(value1: number)\n    {\n        if (value1 === this._value1) return;\n\n        if (value1 < this.min) value1 = this.min;\n        if (value1 > this._value2) value1 = this._value2;\n\n        this._value1 = value1;\n\n        this.updateSlider1();\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    /** Returns right value. */\n    get value2(): number\n    {\n        return this._value2;\n    }\n\n    /** Sets right value. */\n    set value2(value2: number)\n    {\n        if (value2 === this._value2) return;\n\n        if (value2 < this._value1) value2 = this._value1;\n        if (value2 > this.max) value2 = this.max;\n\n        this._value2 = value2;\n\n        this.updateSlider2();\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        super.update(event);\n\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        const slider1Dist = Math.abs(x - this._slider1.x - this._slider1.width);\n        const slider2Dist = Math.abs(x - this._slider2.x);\n\n        if (!this.activeValue)\n        {\n            if (this.slider1 && x < this.slider1.x)\n            {\n                this.activeValue = 'value1';\n            }\n            else if (this.slider2 && x > this.slider2.x)\n            {\n                this.activeValue = 'value2';\n            }\n            else\n            {\n                this.activeValue = slider1Dist < slider2Dist ? 'value1' : 'value2';\n            }\n        }\n\n        const progress = this.validate((x / this.bg?.width) * 100);\n\n        if (this.activeValue === 'value1')\n        {\n            this.progressStart = progress;\n            this.value1 = this.min + (((this.max - this.min) / 100) * progress);\n            this.updateProgress(this.value1, this.value2);\n        }\n        else\n        {\n            this.progress = progress;\n            this.value2 = this.min + (((this.max - this.min) / 100) * progress);\n            this.updateProgress(this.value1, this.value2);\n        }\n    }\n\n    protected override endUpdate()\n    {\n        super.endUpdate();\n\n        this.activeValue = null;\n    }\n\n    protected override change()\n    {\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    /**\n     * Set Slider1 instance.\n     * @param value - Container or string with texture name.\n     */\n    override set slider1(value: Container | string)\n    {\n        super.slider1 = value;\n        this.updateSlider1();\n    }\n\n    /** Get Slider1 instance. */\n    override get slider1(): Container\n    {\n        return this._slider1;\n    }\n\n    /**\n     * Sets Slider instance.\n     * @param value - Container or string with texture name.\n     */\n    override set slider2(value: Container | string)\n    {\n        super.slider2 = value;\n        this.updateSlider2();\n    }\n\n    /** Get Slider2 instance. */\n    override get slider2(): Container\n    {\n        return this._slider2;\n    }\n\n    protected updateSlider1()\n    {\n        this.updateProgress(this.value1, this.value2);\n\n        this._slider1.x = (this.bg?.width / 100 * this.progressStart) - (this._slider1.width / 2);\n        this._slider1.y = this.bg?.height / 2;\n\n        if (this._slider2 && this._slider1.x > this._slider2.x)\n        {\n            this._slider1.x = this._slider2.x;\n        }\n\n        if (this.sliderOptions?.showValue)\n        {\n            this.value1Text.text = `${Math.round(this.value1)}`;\n\n            const sliderPosX = this._slider1.x + (this._slider1.width / 2);\n            const sliderPosY = this._slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.sliderOptions.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.sliderOptions.valueTextOffset?.y ?? 0);\n        }\n    }\n\n    protected updateSlider2()\n    {\n        this.updateProgress(this.value1, this.value2);\n\n        this._slider2.x = ((this.bg?.width / 100) * this.progress) - (this._slider2.width / 2);\n        this._slider2.y = this.bg?.height / 2;\n\n        if (this._slider2.x < this._slider1.x)\n        {\n            this._slider2.x = this._slider1.x;\n        }\n\n        if (this.sliderOptions?.showValue)\n        {\n            this.value2Text.text = `${Math.round(this.value2)}`;\n\n            const sliderPosX = this._slider2.x + (this._slider2.width / 2);\n            const sliderPosY = this._slider2.y;\n\n            this.value2Text.x = sliderPosX + (this.sliderOptions.valueTextOffset?.x ?? 0);\n            this.value2Text.y = sliderPosY + (this.sliderOptions.valueTextOffset?.y ?? 0);\n        }\n    }\n\n    /**\n     * Sets width of a Sliders background and fill.\n     * If nineSliceSprite is set, then width will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then width will control components width as Container.\n     * @param value - Width value.\n     */\n    override set width(value: number)\n    {\n        super.width = value;\n\n        this.updateSlider1();\n        this.updateSlider2();\n    }\n\n    /** Gets width of a Slider. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a Sliders background and fill.\n     * If nineSliceSprite is set, then height will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then height will control components height as Container.\n     * @param value - Height value.\n     */\n    override set height(value: number)\n    {\n        super.height = value;\n\n        this.updateSlider1();\n        this.updateSlider2();\n    }\n\n    /** Gets height of a Slider. */\n    override get height(): number\n    {\n        return super.height;\n    }\n\n    override setSize(value: number | Optional<Size, 'height'>, height?: number): void\n    {\n        super.setSize(value, height);\n\n        this.updateSlider1();\n        this.updateSlider2();\n    }\n}\n", "/**\n * Polyfilled function to get the current time in miliseconds.\n * It tries to use `process.hrtime()`, `performance.now()`, `Date.now()` or `new Date().getTime()` in that order.\n */\nexport let NOW: () => number;\n\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\n\n// @ts-ignore\nif (typeof self == \"undefined\" && typeof process !== \"undefined\" && process.hrtime) {\n\tNOW = function (): number {\n\t\t// @ts-ignore\n\t\tconst time = process.hrtime();\n\n\t\t// Convert [seconds, nanoseconds] to milliseconds.\n\t\treturn time[0] * 1000 + time[1] / 1000000;\n\t};\n}\n// In a browser, use self.performance.now if it is available.\nelse if (typeof self !== \"undefined\" && self.performance !== undefined && self.performance.now !== undefined) {\n\t// This must be bound, because directly assigning this function\n\t// leads to an invocation exception in Chrome.\n\tNOW = self.performance.now.bind(self.performance);\n}\n// Use Date.now if it is available.\nelse if (Date.now !== undefined) {\n\tNOW = Date.now;\n}\n// Otherwise, use 'new Date().getTime()'.\nelse {\n\tNOW = function (): number {\n\t\treturn new Date().getTime();\n\t};\n}\n", "import { NOW } from \"./Now\";\nimport type { Tween } from \"./Tween\";\n\n/**\n * A group is a class that allows you to manage many tweens from one place.\n *\n * A tween will ALWAYS belong to a group. If no group is assigned it will default to the static shared group: `Group.shared`.\n */\nexport class Group {\n\tprivate _tweens: {\n\t\t[key: string]: Tween<any>;\n\t} = {};\n\n\tprivate static _shared: Group;\n\n\t/**\n\t * A tween without an explicit group will default to this shared static one.\n\t */\n\tpublic static get shared(): Group {\n\t\tif (!Group._shared) {\n\t\t\tGroup._shared = new Group();\n\t\t}\n\t\treturn Group._shared;\n\t}\n\n\tprivate _paused: boolean = false;\n\n\t/**\n\t * A paused group will skip updating all the asociated tweens.\n\t * _To control all tweens, use {@link Group.getAll} to get an array with all tweens._\n\t * @returns returns true if this group is paused.\n\t */\n\tpublic isPaused(): boolean {\n\t\treturn this._paused;\n\t}\n\n\t/**\n\t * Pauses this group. If a group was already paused, this has no effect.\n\t * A paused group will skip updating all the asociated tweens.\n\t * _To control all tweens, use {@link Group.getAll} to get an array with all tweens._\n\t */\n\tpublic pause(): void {\n\t\tthis._paused = true;\n\t}\n\n\t/**\n\t * Resumes this group. If a group was not paused, this has no effect.\n\t * A paused group will skip updating all the asociated tweens.\n\t * _To control all tweens, use {@link Group.getAll} to get an array with all tweens._\n\t */\n\tpublic resume(): void {\n\t\tthis._paused = false;\n\t}\n\n\tprivate _lastUpdateTime: number = undefined;\n\n\t/**\n\t * Function used by the group to know what time is it.\n\t * Used to calculate the deltaTime in case you call update without the parameter.\n\t */\n\tpublic now: () => number = NOW; // used to calculate deltatime in case you stop providing one\n\n\t/**\n\t * Returns all the tweens in this group.\n\t *\n\t * _note: only **running** tweens are in a group._\n\t * @returns all the running tweens.\n\t */\n\tpublic getAll(): Array<Tween<any>> {\n\t\treturn Object.keys(this._tweens).map((tweenId) => this._tweens[tweenId]);\n\t}\n\n\t/**\n\t * Removes all the tweens in this group.\n\t *\n\t * _note: this will not modify the group reference inside the tween object_\n\t */\n\tpublic removeAll(): void {\n\t\tthis._tweens = {};\n\t}\n\n\t/**\n\t * Adds a tween to this group.\n\t *\n\t * _note: this will not modify the group reference inside the tween object_\n\t * @param tween Tween to add.\n\t */\n\tpublic add(tween: Tween<any>): void {\n\t\tthis._tweens[tween.getId()] = tween;\n\t}\n\n\t/**\n\t * Removes a tween from this group.\n\t *\n\t * _note: this will not modify the group reference inside the tween object_\n\t * @param tween\n\t */\n\tpublic remove(tween: Tween<any>): void {\n\t\tdelete this._tweens[tween.getId()];\n\t}\n\n\t/**\n\t * Updates all the tweens in this group.\n\t *\n\t * If a tween is stopped, paused, finished or non started it will be removed from the group.\n\t *\n\t *  Tweens are updated in \"batches\". If you add a new tween during an\n\t *  update, then the new tween will be updated in the next batch.\n\t *  If you remove a tween during an update, it may or may not be updated.\n\t *  However, if the removed tween was added during the current batch,\n\t *  then it will not be updated.\n\t * @param deltaTime - Amount of **miliseconds** that have passed since last excecution. If not provided it will be calculated using the {@link Group.now} function\n\t * @param preserve - Prevent the removal of stopped, paused, finished or non started tweens.\n\t * @returns returns true if the group is not empty and it is not paused.\n\t */\n\tpublic update(deltaTime?: number, preserve: boolean = false): boolean {\n\t\t// move forward the automatic dt if needed\n\t\tif (deltaTime == undefined) {\n\t\t\t// now varies from line to line, that's why I manually use 0 as dt\n\t\t\tif (this._lastUpdateTime == undefined) {\n\t\t\t\tthis._lastUpdateTime = this.now();\n\t\t\t\tdeltaTime = 0;\n\t\t\t} else {\n\t\t\t\tdeltaTime = this.now() - this._lastUpdateTime;\n\t\t\t}\n\t\t}\n\t\tthis._lastUpdateTime = this.now();\n\n\t\t// exit early if the entire group is paused\n\t\tif (this._paused) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tweenIds = Object.keys(this._tweens);\n\t\tif (tweenIds.length == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < tweenIds.length; i++) {\n\t\t\tconst tween = this._tweens[tweenIds[i]];\n\n\t\t\t// groups call the preserve with true because they like to delete themselves in a different way.\n\t\t\tif (tween && tween.update(deltaTime, true) == false && !preserve) {\n\t\t\t\tdelete this._tweens[tweenIds[i]];\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n", "/**\n * The type for a function that takes a number between 0 and 1 and returns another number between 0 and 1\n */\nexport type EasingFunction = (amount: number) => number;\n\n/**\n * The Ease class provides a collection of easing functions.\n *\n * These functions take in a parameter between 0 and 1 as the ratio and give out a new ratio.\n *\n * These are [Robert Penner](http://www.robertpenner.com/easing_terms_of_use.html)'s optimized formulas.\n *\n * Need help picking one? [Check this out!](https://easings.net/)\n */\nexport const Easing = {\n\tStep: {\n\t\tNone(amount: number): number {\n\t\t\treturn amount < 0.5 ? 0 : 1;\n\t\t},\n\t},\n\tLinear: {\n\t\tNone(amount: number): number {\n\t\t\treturn amount;\n\t\t},\n\t},\n\tQuadratic: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount * amount;\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn amount * (2 - amount);\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * amount * amount;\n\t\t\t}\n\n\t\t\treturn -0.5 * (--amount * (amount - 2) - 1);\n\t\t},\n\t},\n\tCubic: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount * amount * amount;\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn --amount * amount * amount + 1;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * amount * amount * amount;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((amount -= 2) * amount * amount + 2);\n\t\t},\n\t},\n\tQuartic: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount * amount * amount * amount;\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn 1 - --amount * amount * amount * amount;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * amount * amount * amount * amount;\n\t\t\t}\n\n\t\t\treturn -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n\t\t},\n\t},\n\tQuintic: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount * amount * amount * amount * amount;\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn --amount * amount * amount * amount * amount + 1;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * amount * amount * amount * amount * amount;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n\t\t},\n\t},\n\tSinusoidal: {\n\t\tIn(amount: number): number {\n\t\t\treturn 1 - Math.cos((amount * Math.PI) / 2);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn Math.sin((amount * Math.PI) / 2);\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * amount));\n\t\t},\n\t},\n\tExponential: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount == 0 ? 0 : Math.pow(1024, amount - 1);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn amount == 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif (amount == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (amount == 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, amount - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n\t\t},\n\t},\n\tCircular: {\n\t\tIn(amount: number): number {\n\t\t\treturn 1 - Math.sqrt(1 - amount * amount);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn Math.sqrt(1 - --amount * amount);\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n\t\t},\n\t},\n\tElastic: {\n\t\tIn(amount: number): number {\n\t\t\tif (amount == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (amount == 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\tif (amount == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (amount == 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif (amount == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (amount == 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tamount *= 2;\n\n\t\t\tif (amount < 1) {\n\t\t\t\treturn -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n\t\t\t}\n\n\t\t\treturn 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n\t\t},\n\t},\n\tBack: {\n\t\tIn(amount: number): number {\n\t\t\tconst s = 1.70158;\n\n\t\t\treturn amount * amount * ((s + 1) * amount - s);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\tconst s = 1.70158;\n\n\t\t\treturn --amount * amount * ((s + 1) * amount + s) + 1;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tconst s = 1.70158 * 1.525;\n\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * (amount * amount * ((s + 1) * amount - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n\t\t},\n\t},\n\tBounce: {\n\t\tIn(amount: number): number {\n\t\t\treturn 1 - Easing.Bounce.Out(1 - amount);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\tif (amount < 1 / 2.75) {\n\t\t\t\treturn 7.5625 * amount * amount;\n\t\t\t} else if (amount < 2 / 2.75) {\n\t\t\t\treturn 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n\t\t\t} else if (amount < 2.5 / 2.75) {\n\t\t\t\treturn 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n\t\t\t}\n\n\t\t\treturn 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif (amount < 0.5) {\n\t\t\t\treturn Easing.Bounce.In(amount * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n\t\t},\n\t},\n};\n", "/**\n * The type for a function that picks a value by interpolating the elements of the array given.\n */\nexport type InterpolationFunction = (v: number[], k: number) => number;\n\n/**\n * Object containing common interpolation functions.\n * These functions can be passed in the {@link Tween.interpolation} argument and **will only affect fields where you gave an array as target value**\n */\nexport const Interpolation = {\n\t/**\n\t * Geometric interpolation functions. Good for interpolating positions in space.\n\t */\n\tGeom: {\n\t\t/**\n\t\t * Linear interpolation is like drawing straight lines between the points.\n\t\t */\n\t\tLinear(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.Linear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t\t},\n\n\t\t/**\n\t\t * A Bézier curve is defined by a set of control points P0 through Pn, where n is called its order.\n\t\t * The first and last control points are always the end points of the curve; however, the intermediate control points (if any) generally do not lie on the curve.\n\t\t *\n\t\t * https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Explicit_definition\n\t\t */\n\t\tBezier(v: number[], k: number): number {\n\t\t\tlet b = 0;\n\t\t\tconst n = v.length - 1;\n\t\t\tconst pw = Math.pow;\n\t\t\tconst bn = Interpolation.Utils.Bernstein;\n\n\t\t\tfor (let i = 0; i <= n; i++) {\n\t\t\t\tb += bn(n, i) * pw(1 - k, n - i) * pw(k, i) * v[i];\n\t\t\t}\n\n\t\t\treturn b;\n\t\t},\n\n\t\t/**\n\t\t * Assumes your points are a succession of quadratic bezier curves where the endpoint of one is the start point of the next one.\n\t\t * for example: `[Point in the curve, Control point, Point in the curve, Control point, Point in the curve]`\n\t\t */\n\t\tQuadraticBezier(v: number[], k: number): number {\n\t\t\tlet b = 0;\n\t\t\tconst n = v.length - 1;\n\n\t\t\tif (k == 1) {\n\t\t\t\treturn v[n];\n\t\t\t}\n\n\t\t\tconst pw = Math.pow;\n\t\t\tconst bn = Interpolation.Utils.Bernstein;\n\n\t\t\tconst f = n * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst t = (f - i) * 0.5 + 0.5 * (i % 2);\n\t\t\tconst i0: number = i - (i % 2);\n\t\t\tconst i1: number = i0 + 1;\n\t\t\tconst i2: number = i0 + 2;\n\n\t\t\tb += bn(2, 0) * pw(1 - t, 2 - 0) * pw(t, 0) * v[i0];\n\t\t\tb += bn(2, 1) * pw(1 - t, 2 - 1) * pw(t, 1) * v[i1];\n\t\t\tb += bn(2, 2) * pw(1 - t, 2 - 2) * pw(t, 2) * v[i2];\n\n\t\t\treturn b;\n\t\t},\n\n\t\t/**\n\t\t * Assumes your points are a succession of cubic bezier curves where the endpoint of one is the start point of the next one.\n\t\t * for example: `[Point in the curve, Control point, Control point, Point in the curve, Control point, Control point, Point in the curve]`\n\t\t */\n\t\tCubicBezier(v: number[], k: number): number {\n\t\t\tlet b = 0;\n\t\t\tconst n = v.length - 1;\n\n\t\t\tif (k == 1) {\n\t\t\t\treturn v[n];\n\t\t\t}\n\n\t\t\tconst pw = Math.pow;\n\t\t\tconst bn = Interpolation.Utils.Bernstein;\n\n\t\t\tconst f = n * k;\n\t\t\tconst i = Math.floor(f);\n\n\t\t\tconst t = (f - i) * (1 / 3) + (1 / 3) * (i % 3);\n\n\t\t\tconst i0: number = i - (i % 3);\n\t\t\tconst i1: number = i0 + 1;\n\t\t\tconst i2: number = i0 + 2;\n\t\t\tconst i3: number = i0 + 3;\n\n\t\t\tb += bn(3, 0) * pw(1 - t, 3 - 0) * pw(t, 0) * v[i0];\n\t\t\tb += bn(3, 1) * pw(1 - t, 3 - 1) * pw(t, 1) * v[i1];\n\t\t\tb += bn(3, 2) * pw(1 - t, 3 - 2) * pw(t, 2) * v[i2];\n\t\t\tb += bn(3, 3) * pw(1 - t, 3 - 3) * pw(t, 3) * v[i3];\n\n\t\t\treturn b;\n\t\t},\n\n\t\t/**\n\t\t * A Catmullrom spline is a curve where the original set of points is also used as control points.\n\t\t * Usually Catmullrom splines need two extra elements at the beginning and the end of the point set. This function contemplates that and doesn't need them.\n\t\t *\n\t\t * https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Catmull%E2%80%93Rom_spline\n\t\t */\n\t\tCatmullRom(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tlet f = m * k;\n\t\t\tlet i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.CatmullRom;\n\n\t\t\tif (v[0] == v[m]) {\n\t\t\t\tif (k < 0) {\n\t\t\t\t\ti = Math.floor((f = m * (1 + k)));\n\t\t\t\t}\n\n\t\t\t\treturn fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n\t\t\t}\n\t\t\tif (k < 0) {\n\t\t\t\treturn v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n\t\t\t}\n\n\t\t\treturn fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n\t\t},\n\t},\n\t/**\n\t * Given the spinny nature of angles, sometimes it's better to go back to get to the right place earlier.\n\t * This functions help with that.\n\t */\n\tAngle: {\n\t\t/**\n\t\t * Normalizes angles between 0 and 2pi and then rotates the object in the shortest direction.\n\t\t */\n\t\tRadians(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.WrapLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f, 2 * Math.PI);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f, 2 * Math.PI);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i, 2 * Math.PI);\n\t\t},\n\n\t\t/**\n\t\t * Normalizes angles between 0 and 360 and then rotates the object in the shortest direction.\n\t\t */\n\t\tDegrees(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.WrapLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f, 360);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f, 360);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i, 360);\n\t\t},\n\t},\n\n\t/**\n\t * Even if colors are numbers, interpolating them can be tricky.\n\t */\n\tColor: {\n\t\t/**\n\t\t * Interpolates the color by their channels Red, Green, and Blue.\n\t\t */\n\t\tRGB(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.RGBLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t\t},\n\n\t\t/**\n\t\t * Interpolates the color by their Hue, Saturation, and Value.\n\t\t */\n\t\tHSV(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.HSVLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t\t},\n\n\t\t/**\n\t\t * Interpolates the color by their Hue, Chroma, and Lightness.\n\t\t */\n\t\tHCL(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.HCLLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t\t},\n\t},\n\n\t/**\n\t * Helper functions used to calculate the different interpolations\n\t */\n\tUtils: {\n\t\tRGBsplit(color: number): ARGB {\n\t\t\t// this gets named ARGB but it is actually meaningless. It will work with RGBA just the same.\n\t\t\tconst a = (color >> 24) & 0xff;\n\t\t\tconst r = (color >> 16) & 0xff;\n\t\t\tconst g = (color >> 8) & 0xff;\n\t\t\tconst b = color & 0xff;\n\t\t\treturn { a, r, g, b };\n\t\t},\n\t\tHSVsplit(color: number): AHSV {\n\t\t\tconst rgb = Interpolation.Utils.RGBsplit(color);\n\n\t\t\t(rgb.r /= 255), (rgb.g /= 255), (rgb.b /= 255);\n\n\t\t\tconst max = Math.max(rgb.r, rgb.g, rgb.b);\n\t\t\tconst min = Math.min(rgb.r, rgb.g, rgb.b);\n\t\t\tlet h;\n\t\t\tconst v = max;\n\n\t\t\tconst d = max - min;\n\t\t\tconst s = max == 0 ? 0 : d / max;\n\n\t\t\tif (max == min) {\n\t\t\t\th = 0; // achromatic\n\t\t\t} else {\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase rgb.r:\n\t\t\t\t\t\th = (rgb.g - rgb.b) / d + (rgb.g < rgb.b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgb.g:\n\t\t\t\t\t\th = (rgb.b - rgb.r) / d + 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgb.b:\n\t\t\t\t\t\th = (rgb.r - rgb.g) / d + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\th /= 6;\n\t\t\t}\n\n\t\t\treturn { a: rgb.a, h, s, v };\n\t\t},\n\t\tHSVJoin(color: AHSV): number {\n\t\t\tlet r, g, b;\n\n\t\t\tconst i = Math.floor(color.h * 6);\n\t\t\tconst f = color.h * 6 - i;\n\t\t\tconst p = color.v * (1 - color.s);\n\t\t\tconst q = color.v * (1 - f * color.s);\n\t\t\tconst t = color.v * (1 - (1 - f) * color.s);\n\n\t\t\tswitch (i % 6) {\n\t\t\t\tcase 0:\n\t\t\t\t\t(r = color.v), (g = t), (b = p);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\t(r = q), (g = color.v), (b = p);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t(r = p), (g = color.v), (b = t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t(r = p), (g = q), (b = color.v);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t(r = t), (g = p), (b = color.v);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t(r = color.v), (g = p), (b = q);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn (color.a << 24) | (r << 16) | (g << 8) | b;\n\t\t},\n\n\t\tHCLSplit(color: number): AHCL {\n\t\t\t/* https://www.chilliant.com/rgb2hsv.html */\n\t\t\tconst HCLgamma = 3;\n\t\t\tconst HCLy0 = 100;\n\t\t\tconst HCLmaxL = 0.530454533953517; // == exp(HCLgamma / HCLy0) - 0.5\n\n\t\t\tconst RGB = Interpolation.Utils.RGBsplit(color);\n\t\t\tconst HCL: AHCL = { a: RGB.a, h: 0, c: 0, l: 0 };\n\t\t\tlet H = 0;\n\t\t\tconst U = Math.min(RGB.r, Math.min(RGB.g, RGB.b));\n\t\t\tconst V = Math.max(RGB.r, Math.max(RGB.g, RGB.b));\n\t\t\tlet Q = HCLgamma / HCLy0;\n\t\t\tHCL.c = V - U;\n\t\t\tif (HCL.c != 0) {\n\t\t\t\tH = Math.atan2(RGB.g - RGB.b, RGB.r - RGB.g) / Math.PI;\n\t\t\t\tQ *= U / V;\n\t\t\t}\n\t\t\tQ = Math.exp(Q);\n\t\t\tHCL.h = (H / 2 - Math.min(H % 1, -H % 1) / 6) % 1;\n\t\t\tHCL.c *= Q;\n\t\t\tHCL.l = Interpolation.Utils.Linear(-U, V, Q) / (HCLmaxL * 2);\n\t\t\treturn HCL;\n\t\t},\n\n\t\tHCLJoin(HCL: AHCL): number {\n\t\t\t/* https://www.chilliant.com/rgb2hsv.html */\n\t\t\tconst HCLgamma = 3;\n\t\t\tconst HCLy0 = 100;\n\t\t\tconst HCLmaxL = 0.530454533953517; // == exp(HCLgamma / HCLy0) - 0.5\n\t\t\tconst RGB: ARGB = { a: HCL.a, r: 0, g: 0, b: 0 };\n\n\t\t\tif (HCL.l != 0) {\n\t\t\t\tlet H = HCL.h;\n\t\t\t\tconst C = HCL.c;\n\t\t\t\tconst L = HCL.l * HCLmaxL;\n\t\t\t\tconst Q = Math.exp((1 - C / (2 * L)) * (HCLgamma / HCLy0));\n\t\t\t\tconst U = (2 * L - C) / (2 * Q - 1);\n\t\t\t\tconst V = C / Q;\n\t\t\t\tconst A = (H + Math.min(((2 * H) % 1) / 4, ((-2 * H) % 1) / 8)) * Math.PI * 2;\n\t\t\t\tlet T;\n\t\t\t\tH *= 6;\n\t\t\t\tif (H <= 0.999) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.r = 1;\n\t\t\t\t\tRGB.g = T / (1 + T);\n\t\t\t\t} else if (H <= 1.001) {\n\t\t\t\t\tRGB.r = 1;\n\t\t\t\t\tRGB.g = 1;\n\t\t\t\t} else if (H <= 2) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.r = (1 + T) / T;\n\t\t\t\t\tRGB.g = 1;\n\t\t\t\t} else if (H <= 3) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.g = 1;\n\t\t\t\t\tRGB.b = 1 + T;\n\t\t\t\t} else if (H <= 3.999) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.g = 1 / (1 + T);\n\t\t\t\t\tRGB.b = 1;\n\t\t\t\t} else if (H <= 4.001) {\n\t\t\t\t\tRGB.g = 0;\n\t\t\t\t\tRGB.b = 1;\n\t\t\t\t} else if (H <= 5) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.r = -1 / T;\n\t\t\t\t\tRGB.b = 1;\n\t\t\t\t} else {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.r = 1;\n\t\t\t\t\tRGB.b = -T;\n\t\t\t\t}\n\t\t\t\tRGB.r = RGB.r * V + U;\n\t\t\t\tRGB.g = RGB.g * V + U;\n\t\t\t\tRGB.b = RGB.b * V + U;\n\t\t\t}\n\t\t\treturn (RGB.a << 24) | (RGB.r << 16) | (RGB.g << 8) | RGB.b;\n\t\t},\n\n\t\tWrapLinear(value1: number, value2: number, t: number, maxValue: number): number {\n\t\t\tlet retval: number;\n\n\t\t\t// this fixes my values to be between 0 and maxvalue.\n\t\t\tvalue1 = (value1 + maxValue * Math.trunc(Math.abs(value1 / maxValue))) % maxValue;\n\t\t\tvalue2 = (value2 + maxValue * Math.trunc(Math.abs(value2 / maxValue))) % maxValue;\n\n\t\t\tif (Math.abs(value1 - value2) <= 0.5 * maxValue) {\n\t\t\t\tretval = Interpolation.Utils.Linear(value1, value2, t);\n\t\t\t} else {\n\t\t\t\tif (value1 < value2) {\n\t\t\t\t\tretval = Interpolation.Utils.Linear(value1 + maxValue, value2, t);\n\t\t\t\t} else {\n\t\t\t\t\tretval = Interpolation.Utils.Linear(value1, value2 + maxValue, t);\n\t\t\t\t}\n\t\t\t\tretval = retval % maxValue;\n\t\t\t}\n\t\t\treturn retval;\n\t\t},\n\n\t\tRGBLinear(color1: number, color2: number, t: number): number {\n\t\t\tconst argb1 = Interpolation.Utils.RGBsplit(color1);\n\t\t\tconst argb2 = Interpolation.Utils.RGBsplit(color2);\n\t\t\tconst a = Interpolation.Utils.Linear(argb1.a, argb2.a, t);\n\t\t\tconst r = Interpolation.Utils.Linear(argb1.r, argb2.r, t);\n\t\t\tconst g = Interpolation.Utils.Linear(argb1.g, argb2.g, t);\n\t\t\tconst b = Interpolation.Utils.Linear(argb1.b, argb2.b, t);\n\t\t\treturn (a << 24) | (r << 16) | (g << 8) | b;\n\t\t},\n\t\tHSVLinear(color1: number, color2: number, t: number): number {\n\t\t\tconst ahsv1 = Interpolation.Utils.HSVsplit(color1);\n\t\t\tconst ahsv2 = Interpolation.Utils.HSVsplit(color2);\n\t\t\tlet h: number;\n\t\t\tif (Math.abs(ahsv1.h - ahsv2.h) <= 0.5) {\n\t\t\t\th = Interpolation.Utils.Linear(ahsv1.h, ahsv2.h, t);\n\t\t\t} else {\n\t\t\t\tif (ahsv1.h < ahsv2.h) {\n\t\t\t\t\th = Interpolation.Utils.Linear(ahsv1.h + 1, ahsv2.h, t);\n\t\t\t\t} else {\n\t\t\t\t\th = Interpolation.Utils.Linear(ahsv1.h, ahsv2.h + 1, t);\n\t\t\t\t}\n\t\t\t\th = h % 1;\n\t\t\t}\n\t\t\tconst s = Interpolation.Utils.Linear(ahsv1.s, ahsv2.s, t);\n\t\t\tconst v = Interpolation.Utils.Linear(ahsv1.v, ahsv2.v, t);\n\t\t\tconst a = Interpolation.Utils.Linear(ahsv1.a, ahsv2.a, t); // alpha can't be done with hsv\n\t\t\treturn Interpolation.Utils.HSVJoin({ a, h, s, v });\n\t\t},\n\t\tHCLLinear(color1: number, color2: number, t: number): number {\n\t\t\tconst ahcl1 = Interpolation.Utils.HCLSplit(color1);\n\t\t\tconst ahcl2 = Interpolation.Utils.HCLSplit(color2);\n\t\t\tlet h: number;\n\t\t\tif (Math.abs(ahcl1.h - ahcl2.h) <= 0.5) {\n\t\t\t\th = Interpolation.Utils.Linear(ahcl1.h, ahcl2.h, t);\n\t\t\t} else {\n\t\t\t\tif (ahcl1.h < ahcl2.h) {\n\t\t\t\t\th = Interpolation.Utils.Linear(ahcl1.h + 1, ahcl2.h, t);\n\t\t\t\t} else {\n\t\t\t\t\th = Interpolation.Utils.Linear(ahcl1.h, ahcl2.h + 1, t);\n\t\t\t\t}\n\t\t\t\th = h % 1;\n\t\t\t}\n\t\t\tconst s = Interpolation.Utils.Linear(ahcl1.c, ahcl2.c, t);\n\t\t\tconst v = Interpolation.Utils.Linear(ahcl1.l, ahcl2.l, t);\n\t\t\tconst a = Interpolation.Utils.Linear(ahcl1.a, ahcl2.a, t); // alpha can't be done with hsv\n\t\t\treturn Interpolation.Utils.HSVJoin({ a, h, s, v });\n\t\t},\n\n\t\tLinear(p0: number, p1: number, t: number): number {\n\t\t\treturn (p1 - p0) * t + p0;\n\t\t},\n\t\tBernstein(n: number, i: number): number {\n\t\t\tconst fc = Interpolation.Utils.Factorial;\n\n\t\t\treturn fc(n) / fc(i) / fc(n - i);\n\t\t},\n\t\tFactorial: (function () {\n\t\t\tconst a = [1];\n\n\t\t\treturn function (n: number): number {\n\t\t\t\tlet s = 1;\n\n\t\t\t\tif (a[n]) {\n\t\t\t\t\treturn a[n];\n\t\t\t\t}\n\n\t\t\t\tfor (let i = n; i > 1; i--) {\n\t\t\t\t\ts *= i;\n\t\t\t\t}\n\n\t\t\t\ta[n] = s;\n\n\t\t\t\treturn s;\n\t\t\t};\n\t\t})(),\n\n\t\tCatmullRom(p0: number, p1: number, p2: number, p3: number, t: number): number {\n\t\t\tconst v0 = (p2 - p0) * 0.5;\n\t\t\tconst v1 = (p3 - p1) * 0.5;\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t * t2;\n\n\t\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t\t},\n\t},\n};\n\n/**\n * ARGB color format\n * Alpha, Red, Green, Blue.\n */\nexport interface ARGB {\n\ta: number;\n\tr: number;\n\tg: number;\n\tb: number;\n}\n\n/**\n * HSV color format\n * Alpha, Hue, Saturation, Value.\n */\nexport interface AHSV {\n\ta: number;\n\th: number;\n\ts: number;\n\tv: number;\n}\n\n/**\n * HCL color format\n * Alpha, Hue, Chroma, Luminance.\n */\nexport interface AHCL {\n\ta: number;\n\th: number;\n\tc: number;\n\tl: number;\n}\n", "/**\n * Silly class to have a shared number that goes up.\n */\nexport class Sequence {\n\tprivate static _nextId = 0;\n\n\tpublic static nextId(): number {\n\t\treturn Sequence._nextId++;\n\t}\n}\n", "import { EasingFunction, Easing } from \"./Easing\";\nimport { InterpolationFunction, Interpolation } from \"./Interpolation\";\n\nexport interface IDefaultValues {\n\tsafetyCheckFunction: (target: unknown) => boolean;\n\teasingFunction: EasingFunction;\n\tyoyoEasingFunction: EasingFunction | undefined;\n\tinterpolationFunction: InterpolationFunction;\n}\n\n/**\n * Default values used **during tween creation**.\n * Allows to change the default values for all tweens.\n */\nexport const DEFAULTS: IDefaultValues = {\n\tsafetyCheckFunction: (_: unknown) => true,\n\teasingFunction: Easing.Linear.None,\n\tyoyoEasingFunction: undefined,\n\tinterpolationFunction: Interpolation.Geom.Linear,\n};\n", "import type { Easing, EasingFunction } from \"./Easing\";\nimport type { Interpolation, InterpolationFunction } from \"./Interpolation\";\nimport { Group } from \"./Group\";\nimport { Sequence } from \"./Sequence\";\nimport { DEFAULTS } from \"./Defaults\";\n\n/**\n * A Tween is basically an animation command.\n * For example: _Go from here to there in this amount of time._\n *\n * Tweens won't start by themselves. **Remeber to call {@link Tween.start} when you want your tweens to start!**\n *\n * Most methods will return the same object to allow for daisy chaining.\n * @template Target of the tween\n */\nexport class Tween<Target> {\n\tprivate _isPaused = false;\n\tprivate _valuesStart: any = {};\n\tprivate _valuesEnd: any = {};\n\tprivate _valuesStartRepeat: any = {};\n\tprivate _duration = 0;\n\tprivate _repeatCount = 0;\n\tprivate _repeat = 0;\n\tprivate _repeatDelayTime?: number;\n\tprivate _yoyo = false;\n\tprivate _isPlaying = false;\n\tprivate get _reversed(): boolean {\n\t\treturn this.yoyo && this._repeatCount % 2 !== 0;\n\t}\n\tprivate _delayTime = 0;\n\tprivate _startTime = 0;\n\tprivate _elapsedTime = 0;\n\tprivate _timescale = 1;\n\tprivate _safetyCheckFunction: (target: Target) => boolean = DEFAULTS.safetyCheckFunction;\n\tprivate _easingFunction: EasingFunction = DEFAULTS.easingFunction;\n\tprivate _yoyoEasingFunction: EasingFunction = DEFAULTS.yoyoEasingFunction;\n\tprivate _interpolationFunction: InterpolationFunction = DEFAULTS.interpolationFunction;\n\tprivate _chainedTweens: Array<Tween<any>> = [];\n\tprivate _onStartCallback?: (object: Target, tweenRef: this) => void;\n\tprivate _onStartCallbackFired = false;\n\tprivate _onAfterDelayCallback?: (object: Target, tweenRef: this) => void;\n\tprivate _onAfterDelayCallbackFired = false;\n\tprivate _onUpdateCallback?: (object: Target, elapsed: number, tweenRef: this) => void;\n\tprivate _onRepeatCallback?: (object: Target, repeatCount: number, tweenRef: this) => void;\n\tprivate _onCompleteCallback?: (object: Target, tweenRef: this) => void;\n\tprivate _onStopCallback?: (object: Target, tweenRef: this) => void;\n\tprivate _id = Sequence.nextId();\n\tprivate _isChainStopped = false;\n\tprivate _object: Target;\n\tprivate _groupRef: Group;\n\tprivate get _group(): Group {\n\t\tif (this._groupRef) {\n\t\t\treturn this._groupRef;\n\t\t} else {\n\t\t\treturn Group.shared;\n\t\t}\n\t}\n\tprivate set _group(value: Group) {\n\t\tthis._groupRef = value;\n\t}\n\n\t/**\n\t * Creates an instance of tween.\n\t * @param object - The target object which properties you want to animate\n\t * @param group - The {@link Group} this new Tween will belong to. If none is provided it will default to the static {@link Group.shared}\n\t */\n\tconstructor(object: Target, group?: Group) {\n\t\tthis._object = object;\n\t\tthis._group = group;\n\t}\n\n\t/**\n\t * Gets the id for this tween. A tween id is a number that increases perpetually with each tween created. It is used inside {@link Group} to keep track of tweens\n\t * @returns returns the id for this tween.\n\t */\n\tpublic getId(): number {\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Gets {@link Group} that this tween belongs to.\n\t * @returns returns the {@link Group} for this tween.\n\t */\n\tpublic getGroup(): Group {\n\t\treturn this._group;\n\t}\n\n\t/**\n\t * Gets the timescale for this tween. The timescale is a factor by which each deltatime is multiplied, allowing to speed up or slow down the tween.\n\t * @returns returns the timescale for this tween.\n\t */\n\tpublic getTimescale(): number {\n\t\treturn this._timescale;\n\t}\n\n\t/**\n\t * A tween is playing when it has been started but hasn't ended yet. This has nothing to do with pausing. For that see {@link Tween.isPaused}.\n\t * @returns returns true if this tween is playing.\n\t */\n\tpublic isPlaying(): boolean {\n\t\treturn this._isPlaying;\n\t}\n\n\t/**\n\t * A tween can only be paused if it was playing.\n\t * @returns returns true if this tween is paused.\n\t */\n\tpublic isPaused(): boolean {\n\t\treturn this._isPaused;\n\t}\n\n\t/**\n\t * Writes the starting values of the tween.\n\t *\n\t * **Starting values generated from {@link Tween.start} will be overwritten.**\n\t * @param properties - Starting values for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic from(properties: RecursivePartial<Target>): this;\n\tpublic from(properties: any): this;\n\tpublic from(properties: any): this {\n\t\ttry {\n\t\t\tJSON.stringify(properties);\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"The object you provided to the from() method has a circular reference!\");\n\t\t}\n\t\tthis._setupProperties(properties, this._valuesStart, properties, this._valuesStartRepeat, true);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the final values for the target object's properties by copy.\n\t * This will try to create a deep copy of the `properties` parameter.\n\t * If you want the tween to keep a reference to the final values use {@link Tween.dynamicTo}.\n\t *\n\t * If an array value is provided for a value that originally wasn't an array, it will be interpreted as an interpolable curve and the values inside the array will be interpolated using the function provided in {@link Tween.interpolation}\n\t *\n\t * If a string value that starts with either `+` or `-`is provided it will be taken as a _relative value_ to the start value.\n\t * @param properties - final values for the target object.\n\t * @param duration - if given it will be used as the duration in **miliseconds**. if not, a call to {@link Tween.duration} will be needed.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic to(properties: RecursivePartial<Target>, duration?: number): this;\n\tpublic to(properties: any, duration?: number): this;\n\tpublic to(properties: any, duration?: number): this {\n\t\ttry {\n\t\t\tthis._valuesEnd = JSON.parse(JSON.stringify(properties));\n\t\t} catch (e) {\n\t\t\t// recursive object. this gonna crash!\n\t\t\tconsole.warn(\"The object you provided to the to() method has a circular reference!. It can't be cloned. Falling back to dynamic targeting\");\n\t\t\treturn this.dynamicTo(properties, duration);\n\t\t}\n\n\t\tif (duration !== undefined) {\n\t\t\tthis._duration = duration;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the final values for the target object's properties by reference.\n\t * This will store a reference to the properties object allowing you to change the final values while the tween is running.\n\t * If you want the tween to make a copy of the final values use {@link Tween.to}.\n\t * @param properties - final values for the target object.\n\t * @param duration - if given it will be used as the duration in **miliseconds**. if not, a call to {@link Tween.duration} will be needed.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic dynamicTo(properties: RecursivePartial<Target>, duration?: number): this;\n\tpublic dynamicTo(properties: any, duration?: number): this;\n\tpublic dynamicTo(properties: any, duration?: number): this {\n\t\tthis._valuesEnd = properties; // JSON.parse(JSON.stringify(properties));\n\n\t\tif (duration !== undefined) {\n\t\t\tthis._duration = duration;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the duration for this tween in **miliseconds**.\n\t * @param d - The duration for this tween in **miliseconds**.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic duration(d: number): this {\n\t\tthis._duration = d;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Tweens won't start by themselves when created. Call this to start the tween.\n\t * Starting values for the animation will be stored at this moment.\n\t *\n\t * **This function can't overwrite the starting values set by {@link Tween.from}**\n\t *\n\t * You can call this method on a finished tween to restart it without changing the starting values.\n\t * To restart a tween and reset the starting values use {@link Tween.restart}\n\t * @param delay - if given it will be used as the delay in **miliseconds**.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic start(delay?: number): this {\n\t\tif (this._isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (delay != undefined) {\n\t\t\tthis._delayTime = delay;\n\t\t}\n\n\t\tthis._group.add(this);\n\n\t\tif (this._reversed) {\n\t\t\tthis._swapEndStartRepeatValues(this._valuesStartRepeat, this._valuesEnd);\n\t\t\tthis._valuesStart = JSON.parse(JSON.stringify(this._valuesStartRepeat));\n\t\t}\n\n\t\tthis._repeatCount = 0; // This must be after we check for the _reversed flag!!.\n\n\t\tthis._isPlaying = true;\n\n\t\tthis._isPaused = false;\n\n\t\tthis._onStartCallbackFired = false;\n\n\t\tthis._onAfterDelayCallbackFired = false;\n\n\t\tthis._isChainStopped = false;\n\n\t\tthis._startTime = -this._delayTime;\n\n\t\tthis._elapsedTime = 0;\n\n\t\tthis._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, false);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Forces a tween to restart.\n\t * Starting values for the animation will be stored at this moment.\n\t * This literally calls {@link Tween.reset} and then {@link Tween.start}.\n\t *\n\t * **Starting values will be cleared!. This function will erase all values created from {@link Tween.from} and/or {@link Tween.start}**\n\t * @param delay - if given it will be used as the delay in **miliseconds**.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic restart(delay?: number): this {\n\t\tthis.reset();\n\t\treturn this.start(delay);\n\t}\n\n\t/**\n\t * @experimental\n\t * Clears the starting and loop starting values.\n\t *\n\t * **Starting values will be cleared!. This function will erase all values created from {@link Tween.from} and/or {@link Tween.start}**\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic reset(): this {\n\t\tif (this._isPlaying) {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._valuesStart = {};\n\t\tthis._valuesStartRepeat = {};\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Stops the tween and sets the values to the starting ones.\n\t *\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic rewind(): this {\n\t\tif (this._isPlaying) {\n\t\t\tthis.stop();\n\t\t}\n\n\t\tif (this._reversed) {\n\t\t\t// if you rewind from a reversed position, we unreverse.\n\t\t\tthis._swapEndStartRepeatValues(this._valuesStartRepeat, this._valuesEnd);\n\t\t}\n\n\t\tconst value = this._easingFunction(0);\n\n\t\t// properties transformations\n\t\tthis._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n\n\t\treturn this;\n\t}\n\n\tprivate _setupProperties(_object: any, _valuesStart: any, _valuesEnd: any, _valuesStartRepeat: any, overwrite: boolean): void {\n\t\tfor (const property in _valuesEnd) {\n\t\t\tconst startValue = _object[property];\n\t\t\tconst startValueIsArray = Array.isArray(startValue);\n\t\t\tconst startValueIsNumber = !Number.isNaN(Number(startValue));\n\t\t\tconst propType = startValueIsArray ? \"array\" : typeof startValue;\n\t\t\tconst startValueIsObject = propType == \"object\";\n\t\t\tconst endValueIsObject = typeof _valuesEnd[property] == \"object\";\n\t\t\tconst isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n\n\t\t\t// If to() specifies a property that doesn't exist in the source object,\n\t\t\t// we should not set that property in the object\n\t\t\tif (propType == \"undefined\" || propType == \"function\" || _valuesEnd[property] == undefined || (!startValueIsArray && !startValueIsNumber && !startValueIsObject)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// handle the deepness of the values\n\t\t\tif ((startValueIsObject || startValueIsArray || endValueIsObject) && startValue && !isInterpolationList) {\n\t\t\t\tif (typeof _valuesStart[property] == \"undefined\") {\n\t\t\t\t\t_valuesStart[property] = startValueIsArray ? [] : {};\n\t\t\t\t}\n\t\t\t\tif (typeof _valuesStartRepeat[property] == \"undefined\") {\n\t\t\t\t\t_valuesStartRepeat[property] = startValueIsArray ? [] : {};\n\t\t\t\t}\n\n\t\t\t\tthis._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property], overwrite);\n\t\t\t} else {\n\t\t\t\t// Save the starting value, but only once.\n\t\t\t\tif (typeof _valuesStart[property] == \"undefined\" || overwrite) {\n\t\t\t\t\t_valuesStart[property] = startValue;\n\t\t\t\t}\n\n\t\t\t\tif (typeof _valuesStartRepeat[property] == \"undefined\" || overwrite) {\n\t\t\t\t\tif (isInterpolationList) {\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property].slice().reverse()[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesStart[property] || 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stops this tween\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic stop(): this {\n\t\tif (!this._isChainStopped) {\n\t\t\tthis._isChainStopped = true;\n\t\t\tthis.stopChainedTweens();\n\t\t}\n\n\t\tif (!this._isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._group.remove(this);\n\n\t\tthis._isPlaying = false;\n\n\t\tthis._isPaused = false;\n\n\t\tif (this._onStopCallback) {\n\t\t\tthis._onStopCallback(this._object, this);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Fastforwards this tween to the end by triggering an update with an infinite value.\n\t * This will work even on paused tweens.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic end(endChainedTweens: boolean = false): this {\n\t\tlet protectedChainedTweens: Tween<any>[] = [];\n\n\t\tif (!endChainedTweens) {\n\t\t\tprotectedChainedTweens = this._chainedTweens;\n\t\t\tthis._chainedTweens = [];\n\t\t}\n\n\t\tthis.resume();\n\t\tthis.update(Infinity);\n\n\t\tif (!endChainedTweens) {\n\t\t\tthis._chainedTweens = protectedChainedTweens;\n\t\t\tfor (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\tthis._chainedTweens[i].start();\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Skips forward the in the repeats of this tween by triggering a biiiiig update.\n\t * Think of this as a less agressive {@link Tween.end}.\n\t *\n\t * @param amount - The amount of repeats to skip.\n\t * @param resetCurrentLoop - If true, the time will become zero and the object will return to the initial value in the next update.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic skip(amount: number, resetCurrentLoop: boolean = false): this {\n\t\tthis.resume();\n\n\t\tthis.update(amount * this._duration - (resetCurrentLoop ? this._elapsedTime : 0));\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pauses this tween. Does nothing is if the tween was already paused or wasn't playing.\n\t * Paused tweens ignore all update calls.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic pause(): this {\n\t\tif (this._isPaused || !this._isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._isPaused = true;\n\n\t\tthis._group.remove(this);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resumes this tween. Does nothing if the tween wasn't paused nor running.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic resume(): this {\n\t\tif (!this._isPaused || !this._isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._isPaused = false;\n\n\t\tthis._group.add(this);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Stops tweens chained to this tween. To chain a tween see {@link Tween.chain}.\n\t *\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic stopChainedTweens(): this {\n\t\tfor (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\tthis._chainedTweens[i].stop();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Starts all tweens chained to this tween. To chain a tween see {@link Tween.chain}.\n\t *\n\t * @param stopThis - If true, this tween will be stopped before it starts the chained tweens.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic startChainedTweens(stopThis: boolean = false): this {\n\t\tif (stopThis) {\n\t\t\tthis.stop();\n\t\t}\n\n\t\tfor (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\tthis._chainedTweens[i].start();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the {@link Group} for this tween.\n\t * @param group - the group for this tween. If undefined or null is given, the group will default to {@link Group.shared}.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic group(group: Group): this {\n\t\tthis._group = group;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the delay for this tween.\n\t *\n\t * This will only be applied at the start of the tween. For delaying the repeating of a tween, see {@link Tween.repeatDelay}\n\t *\n\t * **This will only work before calling {@link Tween.start}.**\n\t * @param amount - the delay for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic delay(amount: number): this {\n\t\tthis._delayTime = amount;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the timescale for this tween.\n\t * The deltaTime inside the update will be multiplied by this value allowing to speed up or slow down the flow of time.\n\t * @param multiplier - the timescale value for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic timescale(multiplier: number): this {\n\t\tthis._timescale = multiplier;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the number of times this tween will loop\n\t * @param times - the number of loops. For endless loops use `Infinity`\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic repeat(times: number = Infinity): this {\n\t\tthis._repeat = times;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the repeat delay for this tween.\n\t *\n\t * This will only be applied at the start of every repeat. For delaying only the start, see {@link Tween.delay}\n\t * @param amount - the repeat delay for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic repeatDelay(amount: number): this {\n\t\tthis._repeatDelayTime = amount;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if this tween should yoyo (reflect) itself when repeating.\n\t * @param yoyo - the yoyo value for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic yoyo(yoyo: boolean = true): this {\n\t\tthis._yoyo = yoyo;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the easing function to interpolate the starting values with the final values.\n\t *\n\t * You can use the functions inside the {@link Easing} object.\n\t * @param easingFunction - a function that takes a number between 0 and 1 and returns another number between 0 and 1\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic easing(easingFunction: EasingFunction): this {\n\t\tthis._easingFunction = easingFunction;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Sets the safety check function to test if the tweening object is still valid.\n\t * If the function returns a non-truthy value, the tween will skip the update loop.\n\t * @param safetyCheckFunction - a function that takes the target object for this tween and returns true if the object is still valid.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic safetyCheck(safetyCheckFunction: (target: Target) => boolean): this {\n\t\tthis._safetyCheckFunction = safetyCheckFunction;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Sets the easing function to interpolate the starting values with the final values on the way back due to a yoyo tween.\n\t *\n\t * You can use the functions inside the {@link Easing} object.\n\t * @param easingFunction - a function that takes a number between 0 and 1 and returns another number between 0 and 1\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic yoyoEasing(easingFunction: EasingFunction): this {\n\t\tthis._yoyoEasingFunction = easingFunction;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the easing function to interpolate the starting values with the final values when the final value is an array of objects.\n\t * Use this to create bezier curves or interpolate colors.\n\t *\n\t * You can use the functions inside the {@link Interpolation} object.\n\t * @param interpolationFunction\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic interpolation(interpolationFunction: InterpolationFunction): this {\n\t\tthis._interpolationFunction = interpolationFunction;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds tweens to be called when this tween ends.\n\t * The tweens here will be called all at the same time.\n\t * @param tweens - tweens to be started when this tween ends\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic chain(...tweens: Array<Tween<any>>): this {\n\t\tthis._chainedTweens = tweens;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onStart callback. This will be called as soon as you call {@link Tween.start}.\n\t * @param callback - the function to call on start. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onStart(callback: (object: Target, tween: this) => void): this {\n\t\tthis._onStartCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onAfterDelay callback. This will be called when the delay is over.\n\t * @param callback - the function to call on start. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onAfterDelay(callback: (object: Target, tween: this) => void): this {\n\t\tthis._onAfterDelayCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onStart callback\n\t * @param callback - the function to call on start. It will recieve the target object, this tween, and a number between 0 and 1 determining the progress as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onUpdate(callback: (object: Target, elapsed: number, tween: this) => void): this {\n\t\tthis._onUpdateCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onRepeat callback\n\t * @param callback - the function to call on repeat. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onRepeat(callback: (object: Target, repeatCount: number, tweenRef: this) => void): this {\n\t\tthis._onRepeatCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onComplete callback\n\t * @param callback - the function to call on complete. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onComplete(callback: (object: Target, tween: this) => void): this {\n\t\tthis._onCompleteCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onStop callback\n\t * @param callback - the function to call on stop. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onStop(callback: (object: Target, tween: this) => void): this {\n\t\tthis._onStopCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates this tween\n\t * @param deltaTime - the amount of time that passed since last update in **miliseconds**\n\t * @param preserve - Prevent the removal of stopped, paused, finished or non started tweens from their group.\n\t * @returns returns true if the tween hasn't finished yet.\n\t */\n\tpublic update(deltaTime: number, preserve: boolean = false): boolean {\n\t\tconst retval = this._internalUpdate(deltaTime);\n\t\tif (!retval && !preserve) {\n\t\t\tthis._group.remove(this);\n\t\t}\n\t\treturn retval;\n\t}\n\n\tprivate _internalUpdate(deltaTime: number): boolean {\n\t\tif (!this._safetyCheckFunction(this._object)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._isPaused) {\n\t\t\treturn false;\n\t\t}\n\n\t\tdeltaTime *= this._timescale;\n\n\t\tlet elapsed;\n\n\t\tthis._elapsedTime += deltaTime;\n\n\t\tconst endTime = this._duration;\n\t\tconst currentTime = this._startTime + this._elapsedTime;\n\n\t\tif (currentTime > endTime && !this._isPlaying) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the tween was already finished,\n\t\tif (!this.isPlaying) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tif (this._onStartCallbackFired == false) {\n\t\t\tif (this._onStartCallback) {\n\t\t\t\tthis._onStartCallback(this._object, this);\n\t\t\t}\n\n\t\t\tthis._onStartCallbackFired = true;\n\t\t}\n\n\t\tif (this._onAfterDelayCallbackFired == false && currentTime >= 0) {\n\t\t\tif (this._onAfterDelayCallback) {\n\t\t\t\tthis._onAfterDelayCallback(this._object, this);\n\t\t\t}\n\n\t\t\tthis._onAfterDelayCallbackFired = true;\n\t\t}\n\n\t\telapsed = currentTime / this._duration;\n\t\t// zero duration makes elapsed a NaN. We need to fix this!\n\t\tif (this._duration == 0) {\n\t\t\t// positive currentTime means we have no delay to wait for!\n\t\t\tif (currentTime >= 0) {\n\t\t\t\telapsed = 1;\n\t\t\t} else {\n\t\t\t\telapsed = 0;\n\t\t\t}\n\t\t}\n\t\t// otherwise, clamp the result\n\t\telapsed = Math.min(1, elapsed);\n\t\telapsed = Math.max(0, elapsed);\n\n\t\tlet leftOverTime = Number.isFinite(currentTime) ? currentTime % this._duration : currentTime; // leftover time\n\t\tif (Number.isNaN(leftOverTime)) {\n\t\t\tleftOverTime = 0;\n\t\t}\n\t\tconst loopsMade = Math.floor(currentTime / this._duration); // if we overloop, how many loops did we eat?\n\n\t\t// check which easing to use...\n\t\tlet value: number;\n\t\tif (this._reversed && this._yoyoEasingFunction) {\n\t\t\tvalue = this._yoyoEasingFunction(elapsed);\n\t\t} else {\n\t\t\tvalue = this._easingFunction(elapsed);\n\t\t}\n\n\t\t// properties transformations\n\t\tthis._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n\n\t\t// if there is absolutely no chance to loop, call update. we will be done.\n\t\tif (this._onUpdateCallback && (elapsed != 1 || this._repeat - this._repeatCount <= 0)) {\n\t\t\tthis._onUpdateCallback(this._object, elapsed, this);\n\t\t}\n\n\t\tif (elapsed == 1) {\n\t\t\tif (this._repeat - this._repeatCount > 0) {\n\t\t\t\t// increase loops\n\t\t\t\tconst oldCount = this._repeatCount;\n\t\t\t\tthis._repeatCount = Math.min(this._repeat + 1, this._repeatCount + loopsMade);\n\n\t\t\t\tif (this._onUpdateCallback && (this._repeat - this._repeatCount < 0 || leftOverTime <= 0)) {\n\t\t\t\t\tthis._onUpdateCallback(this._object, elapsed, this);\n\t\t\t\t}\n\n\t\t\t\t// fix starting values for yoyo or relative\n\t\t\t\tif (this._yoyo) {\n\t\t\t\t\tthis._swapEndStartRepeatValues(this._valuesStartRepeat, this._valuesEnd);\n\t\t\t\t} else {\n\t\t\t\t\tthis._moveForwardStartRepeatValues(this._valuesStartRepeat, this._valuesEnd);\n\t\t\t\t}\n\n\t\t\t\t// Reassign starting values\n\t\t\t\tthis._valuesStart = JSON.parse(JSON.stringify(this._valuesStartRepeat));\n\n\t\t\t\t// restart start time\n\t\t\t\tif (this._repeatDelayTime !== undefined) {\n\t\t\t\t\tthis._startTime = -this._repeatDelayTime;\n\t\t\t\t} else {\n\t\t\t\t\tthis._startTime = 0;\n\t\t\t\t}\n\n\t\t\t\tif (this._onRepeatCallback) {\n\t\t\t\t\t// We fallback to only one call.\n\t\t\t\t\tlet callbackCount: number = 1;\n\n\t\t\t\t\tif (Number.isFinite(loopsMade)) {\n\t\t\t\t\t\t// if we have a logical number of loops, we trigger the callback that many times\n\t\t\t\t\t\tcallbackCount = this._repeatCount - oldCount;\n\t\t\t\t\t} else if (Number.isFinite(this._repeat)) {\n\t\t\t\t\t\t// if the amount of loops is infinite, we trigger the callback the amount of loops remaining\n\t\t\t\t\t\tcallbackCount = this._repeat - oldCount;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < callbackCount; i++) {\n\t\t\t\t\t\tthis._onRepeatCallback(this._object, oldCount + 1 + i, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._elapsedTime = 0; // reset the elapsed time\n\n\t\t\t\t// if we have more loops to go, then go\n\t\t\t\tif (this._repeat - this._repeatCount >= 0) {\n\t\t\t\t\t// update with the leftover time\n\t\t\t\t\tif (leftOverTime > 0 && Number.isFinite(this._repeat)) {\n\t\t\t\t\t\t// only if it is greater than 0 and do not emit onupdate events...\n\t\t\t\t\t\tthis._internalUpdate(leftOverTime);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are here, either we are not a looping boi or we are a finished looping boi\n\t\t\tif (this._onCompleteCallback) {\n\t\t\t\tthis._onCompleteCallback(this._object, this);\n\t\t\t}\n\n\t\t\tfor (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t// Make the chained tweens start exactly at the time they should,\n\t\t\t\t// even if the update method was called way past the duration of the tween\n\t\t\t\tthis._chainedTweens[i].start();\n\t\t\t\tif (leftOverTime > 0) {\n\t\t\t\t\tthis._chainedTweens[i].update(leftOverTime);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._isPlaying = false;\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate _updateProperties(_object: any, _valuesStart: any, _valuesEnd: any, value: number): void {\n\t\tfor (const property in _valuesEnd) {\n\t\t\t// Don't update properties that do not exist in the source object\n\t\t\tif (_valuesStart[property] == undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst start = _valuesStart[property];\n\t\t\tlet end = _valuesEnd[property];\n\t\t\tconst startIsArray = Array.isArray(_object[property]);\n\t\t\tconst endIsArray = Array.isArray(end);\n\t\t\tconst isInterpolationList = !startIsArray && endIsArray;\n\n\t\t\tif (isInterpolationList) {\n\t\t\t\tif (this._reversed) {\n\t\t\t\t\t_object[property] = this._interpolationFunction(end.concat([start]) as Array<number>, value);\n\t\t\t\t} else {\n\t\t\t\t\t_object[property] = this._interpolationFunction([start].concat(end) as Array<number>, value);\n\t\t\t\t}\n\t\t\t} else if (typeof end == \"object\" && end) {\n\t\t\t\tthis._updateProperties(_object[property], start, end, value);\n\t\t\t} else {\n\t\t\t\t// Parses relative end values with start as base (e.g.: +10, -3)\n\t\t\t\tend = this._handleRelativeValue(start as number, end as number | string);\n\n\t\t\t\t// Protect against non numeric properties.\n\t\t\t\tif (typeof end == \"number\" && (typeof start == \"number\" || typeof start == \"string\")) {\n\t\t\t\t\t// I am certain that start here won't anser NaN or it would have been filtrated on the setupProperties\n\t\t\t\t\t_object[property] = Number(start) + (end - Number(start)) * value;\n\n\t\t\t\t\t// if it was originally a string, we make it back to string. keep it tidy\n\t\t\t\t\tif (typeof start == \"string\") {\n\t\t\t\t\t\t_object[property] = String(_object[property]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _handleRelativeValue(start: number, end: number | string): number {\n\t\tif (typeof end !== \"string\") {\n\t\t\treturn end;\n\t\t}\n\n\t\tif (end.charAt(0) == \"+\" || end.charAt(0) == \"-\") {\n\t\t\treturn start + Number(end);\n\t\t}\n\n\t\treturn Number(end);\n\t}\n\n\tprivate _swapEndStartRepeatValues(_valuesStartRepeat: any, _valuesEnd: any): void {\n\t\tfor (const property in _valuesStartRepeat) {\n\t\t\tconst isInterpolationList = !Array.isArray(_valuesStartRepeat[property]) && Array.isArray(_valuesEnd[property]);\n\n\t\t\tif (typeof _valuesStartRepeat[property] == \"object\") {\n\t\t\t\tthis._swapEndStartRepeatValues(_valuesStartRepeat[property], _valuesEnd[property]);\n\t\t\t} else {\n\t\t\t\tconst tmp = _valuesStartRepeat[property];\n\t\t\t\tif (typeof _valuesEnd[property] == \"string\") {\n\t\t\t\t\t_valuesStartRepeat[property] = Number(_valuesStartRepeat[property]) + Number(_valuesEnd[property]);\n\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t} else if (isInterpolationList) {\n\t\t\t\t\tconst aux = _valuesEnd[property].slice().reverse();\n\t\t\t\t\t_valuesStartRepeat[property] = aux[0];\n\t\t\t\t\t_valuesEnd[property] = aux;\n\t\t\t\t} else {\n\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property];\n\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _moveForwardStartRepeatValues(_valuesStartRepeat: any, _valuesEnd: any): void {\n\t\tfor (const property in _valuesStartRepeat) {\n\t\t\tif (typeof _valuesEnd[property] == \"object\") {\n\t\t\t\tthis._moveForwardStartRepeatValues(_valuesStartRepeat[property], _valuesEnd[property]);\n\t\t\t} else {\n\t\t\t\tif (typeof _valuesEnd[property] == \"string\") {\n\t\t\t\t\t_valuesStartRepeat[property] = Number(_valuesStartRepeat[property]) + Number(_valuesEnd[property]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A recursive version of Typescript's Partial<> decorator.\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : RecursivePartial<T[P]>;\n};\nexport default Tween;\n", "/**\n * Constant with the hardcoded version of the app\n */\nexport const VERSION = \"2.1.0\";\n", "import { Container } from 'pixi.js';\n\nexport function fitToView(parent: Container, child: Container, padding = 0, uniformScaling = true)\n{\n    let scaleX = child.scale.x;\n    let scaleY = child.scale.y;\n\n    if (!parent)\n    {\n        throw new Error('Parent is not defined');\n    }\n\n    const maxWidth = parent.width - (padding * 2);\n    const maxHeight = parent.height - (padding * 2);\n\n    const widthOverflow = maxWidth - Math.round(child.width);\n    const heightOverflow = maxHeight - Math.round(child.height);\n\n    if (widthOverflow < 0)\n    {\n        scaleX = maxWidth / (child.width / scaleX);\n    }\n\n    if (heightOverflow < 0)\n    {\n        scaleY = maxHeight / (child.height / scaleY);\n    }\n\n    if (scaleX <= 0 || scaleY <= 0)\n    {\n        child.scale.set(0);\n\n        return;\n    }\n\n    if (uniformScaling || child.scale.x === child.scale.y)\n    {\n        const scale = Math.min(scaleX, scaleY);\n\n        child.scale.set(scale, scale);\n    }\n    else\n    {\n        const ratio = child.scale.x / child.scale.y;\n\n        if (widthOverflow < heightOverflow)\n        {\n            child.scale.set(scaleX, scaleX / ratio);\n        }\n        else\n        {\n            child.scale.set(scaleY * ratio, scaleY);\n        }\n    }\n}\n", "import { AbstractText, AnyTextStyle, AnyTextStyleOptions, Text } from 'pixi.js';\n\nexport type PixiText = AbstractText;\nexport type AnyText = string | number | PixiText;\nexport type PixiTextClass = new ({ text, style }: { text: string; style?: PixiTextStyle; [x: string]: any }) => PixiText;\nexport type PixiTextStyle = AnyTextStyle | Partial<AnyTextStyleOptions>;\n\nexport function getTextView(text: AnyText): PixiText\n{\n    if (typeof text === 'string' || typeof text === 'number')\n    {\n        return new Text({ text: String(text) });\n    }\n\n    return text;\n}\n", "/* eslint-disable max-len */\nimport { Container, isMobile, NineSliceSprite, ObservablePoint, Rectangle, Texture, Ticker } from 'pixi.js';\nimport { Group, Tween } from 'tweedle.js';\nimport { ButtonContainer } from './Button';\nimport { fitToView } from './utils/helpers/fit';\nimport { AnyText, getTextView, PixiText } from './utils/helpers/text';\nimport { getView } from './utils/helpers/view';\n\nimport type { Optional, Size, Sprite } from 'pixi.js';\n\ntype State = 'default' | 'hover' | 'pressed' | 'disabled';\ntype Pos = { x?: number; y?: number };\ntype PosList = { [K in State]?: Pos };\n\nexport type Offset = Pos & PosList;\n\ntype ButtonViewType = 'defaultView' | 'hoverView' | 'pressedView' | 'disabledView';\n\ntype ButtonView = string | Container;\n\ntype BasicButtonViews = {\n    [K in ButtonViewType]?: Container | NineSliceSprite;\n};\n\ntype ButtonViews = BasicButtonViews & {\n    textView?: PixiText;\n    iconView?: Container;\n};\n\ntype AnimationData = {\n    x?: number;\n    y?: number;\n    width?: number;\n    height?: number;\n    scale?: Pos;\n};\n\ntype Animation = {\n    props: AnimationData;\n    duration?: number;\n};\n\ntype StateAnimations = {\n    [K in State]?: Animation;\n};\n\ntype BasicViewsInput = {\n    [K in ButtonViewType]?: ButtonView;\n};\n\ntype ViewsInput = BasicViewsInput & {\n    text?: AnyText;\n    icon?: ButtonView;\n};\n\nexport type ButtonOptions = ViewsInput & {\n    padding?: number;\n    scale?: number;\n    anchor?: number;\n    anchorX?: number;\n    anchorY?: number;\n    offset?: Offset;\n    textOffset?: Offset;\n    iconOffset?: Offset;\n    defaultTextScale?: Pos | number;\n    defaultIconScale?: Pos | number;\n    defaultTextAnchor?: Pos | number;\n    defaultIconAnchor?: Pos | number;\n    animations?: StateAnimations;\n    nineSliceSprite?: [number, number, number, number];\n    ignoreRefitting?: boolean;\n};\n\n/**\n * Button component with a lot of tweaks.\n *\n * All views, text, icon and animations are optional. You can set them via constructor pr update later.\n *\n * By default text view and icon view are centered in the active view.\n *\n * Offset property of the constructor can be used to adjust the position of the text, icon and the views.\n * @example\n * const button = new FancyButton({\n *     defaultView: `button.png`,\n *     hoverView: `button_hover.png`,\n *     pressedView: `button_pressed.png`,\n *     text: 'Click me!',\n *     animations: {\n *          hover: {\n *              props: {\n *                  scale: {\n *                      x: 1.1,\n *                      y: 1.1,\n *                  }\n *              },\n *              duration: 100,\n *          },\n *          pressed: {\n *              props: {\n *                  scale: {\n *                      x: 0.9,\n *                      y: 0.9,\n *                  }\n *              },\n *              duration: 100,\n *          }\n *      }\n * });\n *\n * button.onPress.connect(() => console.log('Button pressed!'));\n */\nexport class FancyButton extends ButtonContainer\n{\n    protected animations: StateAnimations;\n    protected originalInnerViewState: AnimationData;\n    protected defaultDuration = 100;\n\n    /** FancyButton options. */\n    protected readonly options?: ButtonOptions;\n\n    /** Padding of the button text view. If button text does not fit active view + padding it will scale down to fit. */\n    _padding: number;\n\n    /** Offset of the button state views. If state views have different sizes, this option can help adjust them. */\n    _offset: Offset & Pos;\n\n    /** Offset of the text view. Can be set to any state of the button. */\n    _textOffset: Offset;\n\n    /** Offset of the icon view. Can be set to any state of the button. */\n    iconOffset: Offset;\n\n    //* View that holds all button inner views */\n    innerView = new Container();\n\n    protected _views: ButtonViews = {};\n\n    /** State of the button. Possible valuers are: 'default', 'hover', 'pressed', 'disabled' */\n    state: State;\n\n    /** Anchor point of the button. */\n    anchor: ObservablePoint;\n\n    /** Base text scaling to take into account when fitting inside the button */\n    protected _defaultTextScale: Pos = { x: 1, y: 1 };\n\n    /** Base icon scaling to take into account when fitting inside the button */\n    protected _defaultIconScale: Pos = { x: 1, y: 1 };\n\n    /** Base text anchor to take into account when fitting and placing inside the button */\n    protected _defaultTextAnchor: Pos = { x: 0.5, y: 0.5 };\n\n    /** Base icon anchor to take into account when fitting and placing inside the button */\n    protected _defaultIconAnchor: Pos = { x: 0.5, y: 0.5 };\n\n    /**\n     * Creates a button with a lot of tweaks.\n     * @param {object} options - Button options.\n     * @param {Container} options.defaultView - Container-based view that is shown when non of the button events are active.\n     * @param {Container} options.hoverView - Container-based view that is shown when the mouse hovers over the button.\n     * @param {Container} options.pressedView - Container-based view, shown when the mouse press on the component.\n     * @param {Container} options.disabledView - Container-based view shown when the button is disabled.\n     * @param {Container} options.icon - Container-based view for the button icon.\n     * @param {Text} options.text - Text-based view for the button text.\n     * @param {number} options.padding - Padding of the button text and icon views.\n     * If button text or icon does not fit active view + padding it will scale down to fit.\n     * @param {Point} options.offset - Offset of the button state views.\n     * @param {Point} options.textOffset - Offset of the text view.\n     * @param {Point} options.iconOffset - Offset of the icon view.\n     * @param {number} options.scale - Scale of the button. Scale will be applied to a main container,\n     * when all animations scales will be applied to the inner view.\n     * @param {number} options.defaultTextScale - Base text scaling to take into account when fitting inside the button.\n     * @param {number} options.defaultIconScale - Base icon scaling to take into account when fitting inside the button.\n     * @param {number} options.defaultTextAnchor - Base text anchor to take into account when fitting and placing inside the button.\n     * @param {number} options.defaultIconAnchor - Base icon anchor to take into account when fitting and placing inside the button.\n     * @param {number} options.anchor - Anchor point of the button.\n     * @param {number} options.anchorX - Horizontal anchor point of the button.\n     * @param {number} options.anchorY - Vertical anchor point of the button.\n     * @param options.animations - Animations that will be played when the button state changes.\n     */\n    constructor(options?: ButtonOptions)\n    {\n        super();\n\n        this.options = options ?? {};\n\n        const {\n            defaultView,\n            hoverView,\n            pressedView,\n            disabledView,\n            text,\n            padding,\n            offset,\n            textOffset,\n            iconOffset,\n            defaultTextScale: textScale,\n            defaultIconScale: iconScale,\n            defaultTextAnchor: textAnchor,\n            defaultIconAnchor: iconAnchor,\n            scale,\n            anchor,\n            anchorX,\n            anchorY,\n            icon,\n            animations\n        } = options ?? {};\n\n        this.addChild(this.innerView);\n\n        this.anchor = new ObservablePoint({\n            _onUpdate: () => this.updateAnchor(),\n        });\n        this.anchor.set(anchorX ?? anchor ?? 0, anchorY ?? anchor ?? 0);\n\n        this.padding = padding ?? 0;\n        this.offset = offset;\n        this.textOffset = textOffset;\n        this.iconOffset = iconOffset;\n        this.defaultTextScale = textScale;\n        this.defaultIconScale = iconScale;\n        this.defaultTextAnchor = textAnchor;\n        this.defaultIconAnchor = iconAnchor;\n        this.scale.set(scale ?? 1);\n\n        if (animations)\n        {\n            this.animations = animations;\n            Ticker.shared.add(() => Group.shared.update());\n        }\n\n        this.setState('default');\n\n        this.defaultView = defaultView;\n        this.hoverView = hoverView;\n        this.pressedView = pressedView;\n        this.disabledView = disabledView;\n        this.text = text;\n        this.iconView = icon;\n\n        this.initStateControl();\n    }\n\n    /**\n     * Updates the text of the button and updates its scaling basing on the new size.\n     * @param {string | number} text\n     */\n    set text(text: AnyText)\n    {\n        if (!text || text === 0)\n        {\n            this.removeView('textView');\n\n            return;\n        }\n\n        if (!this._views.textView)\n        {\n            this.createTextView(text);\n\n            return;\n        }\n\n        this._views.textView.text = text.toString();\n    }\n\n    /** Returns the text string of the button text element. */\n    get text(): string | undefined\n    {\n        return this._views.textView?.text;\n    }\n\n    /**\n     * Setter, that prevents all button events from firing.\n     * @param {boolean} enabled\n     */\n    override set enabled(enabled: boolean)\n    {\n        this.button.enabled = enabled;\n\n        this.setState(enabled ? 'default' : 'disabled');\n    }\n\n    override get enabled(): boolean\n    {\n        return this.button.enabled;\n    }\n\n    /**\n     * Updates button state and shows the according views.\n     *\n     * Updates positions and offsets of the views.\n     *\n     * Plays animations if they are set.\n     * @param {State} newState\n     * @param force\n     */\n    setState(newState: State, force = false)\n    {\n        if (!force && this.state === newState)\n        {\n            return;\n        }\n\n        const currentView = this.getStateView(this.state);\n\n        if (currentView) currentView.visible = false;\n\n        this.state = newState;\n\n        const activeView = this.getStateView(newState);\n\n        if (activeView)\n        {\n            this.setOffset(activeView, newState, this.offset);\n            activeView.visible = true;\n        }\n\n        this.updateAnchor();\n\n        this.playAnimations(newState);\n    }\n\n    /**\n     *\n     * Manage button text view.\n     * @param {string | Text} text - can be a string, Text, BitmapText ot HTMLText (Container-based element).\n     */\n    protected createTextView(text: AnyText)\n    {\n        this._views.textView = getTextView(text);\n\n        // If text scale has not manually been set, we will overwrite the base scale with the new text view scale.\n        if (this.options?.defaultTextScale === undefined)\n        {\n            const { x, y } = this._views.textView.scale;\n\n            this._defaultTextScale = { x, y };\n        }\n\n        this.innerView.addChild(this._views.textView);\n\n        this.adjustTextView(this.state);\n    }\n\n    /**\n     * Manages views offsets if it's set.\n     * @param view\n     * @param state\n     * @param offset\n     */\n    protected setOffset(view: Container, state: State, offset: Offset)\n    {\n        const stateOffset = offset\n            ? offset[state]\n            : {\n                x: 0,\n                y: 0\n            };\n\n        const defaultStateOffset = offset?.default;\n\n        if (stateOffset)\n        {\n            view.x += stateOffset.x ?? 0;\n            view.y += stateOffset.y ?? 0;\n        }\n        else if (defaultStateOffset)\n        {\n            view.x += defaultStateOffset.x ?? 0;\n            view.y += defaultStateOffset.y ?? 0;\n        }\n        else if (offset.x || offset.y)\n        {\n            view.x += offset.x ?? 0;\n            view.y += offset.y ?? 0;\n        }\n    }\n\n    /**\n     * Returns active view for the state.\n     * @param state\n     */\n    protected getStateView(state: State): Container | undefined\n    {\n        if (!this._views) return undefined;\n\n        switch (state)\n        {\n            case 'hover':\n                return this._views.hoverView ?? this._views.defaultView ?? undefined;\n            case 'pressed':\n                return this._views.pressedView ?? this._views.hoverView ?? this._views.defaultView ?? undefined;\n            case 'disabled':\n                return this._views.disabledView ?? this._views.defaultView ?? undefined;\n            case 'default':\n                return this._views.defaultView ?? undefined;\n            default:\n                return undefined;\n        }\n    }\n\n    /**\n     * Adjusts text view position and scale.\n     * @param {State} state\n     */\n    protected adjustTextView(state: State)\n    {\n        if (!this.text) return;\n\n        const activeView = this.getStateView(this.state);\n        const { x: anchorX, y: anchorY } = this._defaultTextAnchor;\n\n        if (activeView)\n        {\n            if (!this.options?.ignoreRefitting)\n            {\n                this._views.textView.scale.set(this._defaultTextScale.x, this._defaultTextScale.y);\n            }\n\n            fitToView(activeView, this._views.textView, this.padding, false);\n\n            this._views.textView.x = activeView.x + (activeView.width / 2);\n            this._views.textView.y = activeView.y + (activeView.height / 2);\n        }\n\n        this._views.textView.anchor.set(anchorX, anchorY);\n\n        this.setOffset(this._views.textView, state, this.textOffset);\n    }\n\n    /**\n     * Adjusts icon view position and scale.\n     * @param {State} state\n     */\n    protected adjustIconView(state: State)\n    {\n        if (!this._views.iconView)\n        {\n            return;\n        }\n\n        const activeView = this.getStateView(state);\n\n        if (!activeView)\n        {\n            return;\n        }\n\n        if (!this.options?.ignoreRefitting)\n        {\n            this._views.iconView.scale.set(this._defaultIconScale.x, this._defaultIconScale.y);\n        }\n\n        const { x: anchorX, y: anchorY } = this._defaultIconAnchor;\n\n        fitToView(activeView, this._views.iconView, this.padding, false);\n\n        if ('anchor' in this._views.iconView)\n        {\n            (this._views.iconView.anchor as ObservablePoint).set(anchorX, anchorY);\n        }\n        else\n        {\n            this._views.iconView.pivot.set(\n                anchorX * (this._views.iconView.width / this._views.iconView.scale.x),\n                anchorY * (this._views.iconView.height / this._views.iconView.scale.y)\n            );\n        }\n\n        this._views.iconView.x = activeView.x + (activeView.width / 2);\n        this._views.iconView.y = activeView.y + (activeView.height / 2);\n\n        this.setOffset(this._views.iconView, state, this.iconOffset);\n    }\n\n    /**\n     * Reset views positions according to the button anchor setting.\n     * We have to set the anchor position for each view individually, as each of them\n     * can be a different type of view (container without anchor, sprite with anchor, etc)\n     * we have to reset all anchors to 0,0 and then set the positions manually.\n     */\n    protected updateAnchor()\n    {\n        if (!this._views) return;\n\n        const anchorX = this.anchor.x ?? 0;\n        const anchorY = this.anchor.y ?? 0;\n        const views = [this._views.defaultView, this._views.hoverView, this._views.pressedView, this._views.disabledView];\n\n        views.forEach((view) =>\n        {\n            if (!view) return;\n\n            (view as Sprite).anchor?.set(0);\n\n            view.x = -view.width * anchorX;\n            view.y = -view.height * anchorY;\n        });\n\n        if (this._views.defaultView)\n        {\n            const { x, y, width, height } = this._views.defaultView;\n\n            this.hitArea = new Rectangle(x, y, width, height);\n        }\n\n        this.adjustIconView(this.state);\n        this.adjustTextView(this.state);\n    }\n\n    /**\n     * Sets the default view of the button.\n     * @param { string | Container } view - string (path to the image) or a Container-based view\n     */\n    set defaultView(view: ButtonView | null)\n    {\n        this.updateView('defaultView', view);\n    }\n\n    /** Returns the default view of the button. */\n    get defaultView(): Container | undefined\n    {\n        return this._views.defaultView;\n    }\n\n    /**\n     * Sets the hover view of the button.\n     * @param { string | Container } view - string (path to the image) or a Container-based view\n     */\n    set hoverView(view: ButtonView | null)\n    {\n        this.updateView('hoverView', view);\n        if (this._views.hoverView && this.state !== 'hover')\n        {\n            this._views.hoverView.visible = false;\n        }\n    }\n\n    /** Returns the hover view of the button. */\n    get hoverView(): Container | undefined\n    {\n        return this._views.hoverView;\n    }\n\n    /** Sets the pressed view of the button. */\n    set pressedView(view: ButtonView | null)\n    {\n        this.updateView('pressedView', view);\n        if (this._views.pressedView)\n        {\n            this._views.pressedView.visible = false;\n        }\n    }\n\n    /** Returns the pressed view of the button. */\n    get pressedView(): Container | undefined\n    {\n        return this._views.pressedView;\n    }\n\n    /** Sets the disabled view of the button. */\n    set disabledView(view: ButtonView | null)\n    {\n        this.updateView('disabledView', view);\n        if (this._views.disabledView)\n        {\n            this._views.disabledView.visible = false;\n        }\n    }\n\n    /** Returns the disabled view of the button. */\n    get disabledView(): Container | undefined\n    {\n        return this._views.disabledView;\n    }\n\n    /**\n     * Helper method to update or cleanup button views.\n     * @param { 'defaultView' | 'hoverView' | 'pressedView' | 'disabledView' } viewType - type of the view to update\n     * @param { string | Container | null } view - new view\n     */\n    protected updateView(viewType: ButtonViewType, view: ButtonView | null)\n    {\n        if (view === undefined) return;\n\n        this.removeView(viewType);\n\n        if (view === null)\n        {\n            return;\n        }\n\n        if (this.options?.nineSliceSprite)\n        {\n            if (typeof view === 'string')\n            {\n                this._views[viewType] = new NineSliceSprite({\n                    texture: Texture.from(view),\n                    leftWidth: this.options.nineSliceSprite[0],\n                    topHeight: this.options.nineSliceSprite[1],\n                    rightWidth: this.options.nineSliceSprite[2],\n                    bottomHeight: this.options.nineSliceSprite[3],\n                });\n            }\n            else\n            {\n                console.warn('NineSliceSprite can not be used with views set as Container.');\n            }\n        }\n\n        if (!this._views[viewType])\n        {\n            this._views[viewType] = getView(view);\n        }\n\n        this.setOffset(this._views[viewType], this.state, this.offset);\n\n        if (!this._views[viewType].parent)\n        {\n            this.innerView.addChild(this._views[viewType]);\n        }\n\n        this.updateAnchor();\n\n        if (this._views.iconView)\n        {\n            // place icon on top of the view\n            this.innerView.addChild(this._views.iconView);\n        }\n\n        if (this._views.textView)\n        {\n            // place text on top of the view\n            this.innerView.addChild(this._views.textView);\n        }\n\n        this.setState(this.state, true);\n    }\n\n    /**\n     * Removes button view by type\n     * @param {'defaultView' | 'hoverView' | 'pressedView' | 'disabledView'} viewType - type of the view to remove\n     */\n    removeView(viewType: ButtonViewType | 'textView' | 'iconView')\n    {\n        if (this._views[viewType])\n        {\n            this.innerView.removeChild(this._views[viewType]);\n            this._views[viewType] = null;\n        }\n    }\n\n    /**\n     * Sets the textView of the button.\n     * @param { string | number | PixiText | Text | BitmapText | HTMLText } textView - string, text or pixi text instance.\n     */\n    set textView(textView: AnyText | null)\n    {\n        if (textView === undefined) return;\n\n        this.removeView('textView');\n\n        if (textView === null)\n        {\n            return;\n        }\n\n        this.createTextView(textView);\n    }\n\n    /**\n     * Returns the text view of the button.\n     * @returns pixi text instance or undefined.\n     */\n    get textView(): PixiText | undefined\n    {\n        return this._views.textView;\n    }\n\n    /**\n     * Sets the iconView of the button.\n     * @param { string | Container } view - string (path to the image) or a Container-based view\n     */\n    set iconView(view: ButtonView | null)\n    {\n        if (view === undefined) return;\n\n        this.removeView('iconView');\n\n        if (view === null)\n        {\n            return;\n        }\n\n        this._views.iconView = getView(view);\n\n        // If icon scale has not manually been set, we will overwrite the base scale with the new icon view scale.\n        if (this.options?.defaultIconScale === undefined)\n        {\n            const { x, y } = this._views.iconView.scale;\n\n            this._defaultIconScale = { x, y };\n        }\n\n        if (!this._views.iconView.parent)\n        {\n            this.innerView.addChild(this._views.iconView);\n        }\n\n        this.setState(this.state, true);\n    }\n\n    /** Returns the icon view of the button. */\n    get iconView(): Container | undefined\n    {\n        return this._views.iconView;\n    }\n\n    /**\n     * Starts animation for the current button state if configured.\n     * @param {State} state\n     */\n    protected playAnimations(state: State)\n    {\n        if (!this.animations) return;\n\n        if (state === 'default' && !this.originalInnerViewState)\n        {\n            this.originalInnerViewState = {\n                x: this.innerView.x,\n                y: this.innerView.y,\n                width: this.innerView.width,\n                height: this.innerView.height,\n                scale: {\n                    x: this.innerView.scale.x,\n                    y: this.innerView.scale.y\n                }\n            };\n\n            // first animation state is default, so we don't need to animate it\n            // this part will run only once, during initialization\n            const defaultStateAnimation = this.animations?.default;\n\n            if (defaultStateAnimation)\n            {\n                this.innerView.x = defaultStateAnimation.props.x ?? this.originalInnerViewState.x;\n                this.innerView.y = defaultStateAnimation.props.y ?? this.originalInnerViewState.y;\n                this.innerView.width = defaultStateAnimation.props.width ?? this.originalInnerViewState.width;\n                this.innerView.height = defaultStateAnimation.props.height ?? this.originalInnerViewState.height;\n                this.innerView.scale.x = defaultStateAnimation.props.scale.x ?? this.originalInnerViewState.scale.x;\n                this.innerView.scale.y = defaultStateAnimation.props.scale.y ?? this.originalInnerViewState.scale.y;\n\n                return;\n            }\n        }\n\n        const stateAnimation = this.animations[state] ?? this.animations.default;\n\n        if (stateAnimation)\n        {\n            const data = stateAnimation;\n\n            this.defaultDuration = data.duration;\n\n            new Tween(this.innerView).to(data.props, data.duration).start();\n\n            return;\n        }\n\n        // if there is no animation for the current state, animate the button to the default state\n        new Tween(this.innerView).to(this.originalInnerViewState, this.defaultDuration).start();\n    }\n\n    protected initStateControl()\n    {\n        this.onDown.connect(() =>\n        {\n            this.setState('pressed');\n        });\n\n        this.onUp.connect(() =>\n        {\n            isMobile.any\n                ? this.setState('default')\n                : this.setState('hover');\n        });\n\n        this.onUpOut.connect(() =>\n        {\n            this.setState('default');\n        });\n\n        this.onOut.connect(() =>\n        {\n            if (!this.button.isDown)\n            {\n                this.setState('default');\n            }\n        });\n\n        this.onPress.connect(() =>\n        {\n            isMobile.any\n                ? this.setState('default')\n                : this.setState('hover');\n        });\n\n        this.onHover.connect(() =>\n        {\n            if (!this.button.isDown)\n            {\n                isMobile.any\n                    ? this.setState('default')\n                    : this.setState('hover');\n            }\n        });\n    }\n\n    /**\n     * Sets the button padding.\n     * @param {number} padding - padding of the button text and icon views.\n     */\n    set padding(padding: number)\n    {\n        this._padding = padding;\n\n        this.adjustTextView(this.state);\n        this.adjustIconView(this.state);\n    }\n\n    /** Returns the button padding. */\n    get padding(): number\n    {\n        return this._padding;\n    }\n\n    /**\n     * Sets the button offset.\n     * @param { { x?: number; y?: number } } offset - offset of the button.\n     * Can be set for each state of the button.\n     */\n    set offset(offset: Offset)\n    {\n        this._offset = offset;\n\n        this.updateAnchor();\n    }\n\n    /** Returns the button offset. */\n    get offset(): Offset\n    {\n        return this._offset;\n    }\n\n    /**\n     * Sets the button text offset.\n     * @param { { x?: number; y?: number } } textOffset - offsets of the button text view.\n     * can be set for each state of the button.\n     */\n    set textOffset(textOffset: Offset)\n    {\n        this._textOffset = textOffset;\n\n        this.adjustTextView(this.state);\n    }\n\n    /** Returns the button text offset. */\n    get textOffset(): Offset\n    {\n        return this._textOffset;\n    }\n\n    /**\n     * Sets the base scale for the text view to take into account when fitting inside the button.\n     * @param {Pos | number} scale - base scale of the text view.\n     */\n    set defaultTextScale(scale: Pos | number)\n    {\n        if (scale === undefined) return;\n        // Apply to the options so that the manual scale is prioritized.\n        this.options.defaultTextScale = scale;\n        const isNumber = typeof scale === 'number';\n\n        this._defaultTextScale.x = isNumber ? scale : scale.x ?? 1;\n        this._defaultTextScale.y = isNumber ? scale : scale.y ?? 1;\n        this.adjustTextView(this.state);\n    }\n\n    /** Returns the text view base scale. */\n    get defaultTextScale(): Pos\n    {\n        return this.defaultTextScale;\n    }\n\n    /**\n     * Sets the base scale for the icon view to take into account when fitting inside the button.\n     * @param {Pos | number} scale - base scale of the icon view.\n     */\n    set defaultIconScale(scale: Pos | number)\n    {\n        if (scale === undefined) return;\n        // Apply to the options so that the manual scale is prioritized.\n        this.options.defaultIconScale = scale;\n        const isNumber = typeof scale === 'number';\n\n        this._defaultIconScale.x = isNumber ? scale : scale.x ?? 1;\n        this._defaultIconScale.y = isNumber ? scale : scale.y ?? 1;\n        this.adjustIconView(this.state);\n    }\n\n    /** Returns the icon view base scale. */\n    get defaultIconScale(): Pos\n    {\n        return this.defaultIconScale;\n    }\n\n    /**\n     * Sets the base anchor for the text view to take into account when fitting and placing inside the button.\n     * @param {Pos | number} anchor - base anchor of the text view.\n     */\n    set defaultTextAnchor(anchor: Pos | number)\n    {\n        if (anchor === undefined) return;\n        // Apply to the options so that the manual anchor is prioritized.\n        this.options.defaultTextAnchor = anchor;\n        const isNumber = typeof anchor === 'number';\n\n        this._defaultTextAnchor.x = isNumber ? anchor : anchor.x ?? 1;\n        this._defaultTextAnchor.y = isNumber ? anchor : anchor.y ?? 1;\n        this.adjustTextView(this.state);\n    }\n\n    /** Returns the text view base anchor. */\n    get defaultTextAnchor(): Pos\n    {\n        return this.defaultTextAnchor;\n    }\n\n    /**\n     * Sets the base anchor for the icon view to take into account when fitting and placing inside the button.\n     * @param {Pos | number} anchor - base anchor of the icon view.\n     */\n    set defaultIconAnchor(anchor: Pos | number)\n    {\n        if (anchor === undefined) return;\n        // Apply to the options so that the manual anchor is prioritized.\n        this.options.defaultIconAnchor = anchor;\n        const isNumber = typeof anchor === 'number';\n\n        this._defaultIconAnchor.x = isNumber ? anchor : anchor.x ?? 1;\n        this._defaultIconAnchor.y = isNumber ? anchor : anchor.y ?? 1;\n        this.adjustIconView(this.state);\n    }\n\n    /** Returns the icon view base anchor. */\n    get defaultIconAnchor(): Pos\n    {\n        return this.defaultIconAnchor;\n    }\n\n    /**\n     * Sets width of a FancyButtons state views.\n     * If nineSliceSprite is set, then width will be set to nineSliceSprites of a views.\n     * If nineSliceSprite is not set, then width will control components width as Container.\n     * @param width - Width value.\n     */\n    override set width(width: number)\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this._views.defaultView)\n            {\n                this._views.defaultView.width = width;\n            }\n            if (this._views.hoverView)\n            {\n                this._views.hoverView.width = width;\n            }\n            if (this._views.pressedView)\n            {\n                this._views.pressedView.width = width;\n            }\n            if (this._views.disabledView)\n            {\n                this._views.disabledView.width = width;\n            }\n\n            this.adjustTextView(this.state);\n            this.adjustIconView(this.state);\n            this.updateAnchor();\n        }\n        else\n        {\n            super.width = width;\n        }\n    }\n\n    /** Gets width of a FancyButton. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a FancyButtons state views.\n     * If nineSliceSprite is set, then height will be set to nineSliceSprites of a views.\n     * If nineSliceSprite is not set, then height will control components height as Container.\n     * @param height - Height value.\n     */\n    override set height(height: number)\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this._views.defaultView)\n            {\n                this._views.defaultView.height = height;\n            }\n            if (this._views.hoverView)\n            {\n                this._views.hoverView.height = height;\n            }\n            if (this._views.pressedView)\n            {\n                this._views.pressedView.height = height;\n            }\n            if (this._views.disabledView)\n            {\n                this._views.disabledView.height = height;\n            }\n\n            this.adjustTextView(this.state);\n            this.adjustIconView(this.state);\n            this.updateAnchor();\n        }\n        else\n        {\n            super.height = height;\n        }\n    }\n\n    /** Gets height of a FancyButton. */\n    override get height(): number\n    {\n        return super.height;\n    }\n\n    override setSize(value: number | Optional<Size, 'height'>, height?: number): void\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this._views.defaultView)\n            {\n                this._views.defaultView.setSize(value, height);\n            }\n            if (this._views.hoverView)\n            {\n                this._views.hoverView.setSize(value, height);\n            }\n            if (this._views.pressedView)\n            {\n                this._views.pressedView.setSize(value, height);\n            }\n            if (this._views.disabledView)\n            {\n                this._views.disabledView.setSize(value, height);\n            }\n\n            this.adjustTextView(this.state);\n            this.adjustIconView(this.state);\n            this.updateAnchor();\n        }\n        else\n        {\n            super.setSize(value, height);\n        }\n    }\n}\n", "import {\n    AnyTextStyle,\n    Container,\n    DestroyOptions,\n    Graphics,\n    isMobile,\n    NineSliceSprite,\n    Optional,\n    Size,\n    Sprite,\n    Text,\n    TextStyleOptions,\n    Texture,\n    Ticker,\n} from 'pixi.js';\nimport { Signal } from 'typed-signals';\nimport { PixiText, PixiTextClass, PixiTextStyle } from './utils/helpers/text';\nimport { getView } from './utils/helpers/view';\nimport { Padding } from './utils/HelpTypes';\n\ntype ViewType = Sprite | Graphics | string;\n\nexport type InputOptions = {\n    bg: ViewType;\n    textStyle?: PixiTextStyle;\n    TextClass?: PixiTextClass;\n    placeholder?: string;\n    value?: string;\n    maxLength?: number;\n    align?: 'left' | 'center' | 'right';\n    padding?: Padding;\n    cleanOnFocus?: boolean;\n    nineSliceSprite?: [number, number, number, number];\n    addMask?: boolean;\n};\n\n/**\n * Container-based component that creates an input to read the user's text.\n * @example\n * new Input({\n *     bg: Sprite.from('input.png'),\n *     placeholder: 'Enter text',\n *     padding: {\n *      top: 11,\n *      right: 11,\n *      bottom: 11,\n *      left: 11\n *     } // alternatively you can use [11, 11, 11, 11] or [11, 11] or just 11\n * });\n */\nexport class Input extends Container\n{\n    protected _bg?: Container | NineSliceSprite | Graphics;\n    protected inputMask: Container | NineSliceSprite | Graphics;\n    protected _cursor: Sprite;\n    protected inputField: PixiText;\n    protected placeholder: PixiText;\n    protected editing = false;\n    protected tick = 0;\n    protected lastInputData: string;\n\n    protected activation = false;\n    protected readonly options: InputOptions;\n    protected input: HTMLInputElement;\n\n    protected handleActivationBinding = this.handleActivation.bind(this);\n    protected onKeyUpBinding = this.onKeyUp.bind(this);\n    protected stopEditingBinding = this.stopEditing.bind(this);\n    protected onInputBinding = this.onInput.bind(this);\n\n    /** Fires when input loses focus. */\n    onEnter: Signal<(text: string) => void>;\n\n    /** Fires every time input string is changed. */\n    onChange: Signal<(text: string) => void>;\n\n    /** Top side padding */\n    paddingTop = 0;\n\n    /** Right side padding */\n    paddingRight = 0;\n\n    /** Bottom side padding */\n    paddingBottom = 0;\n\n    /** Left side padding */\n    paddingLeft = 0;\n\n    /**\n     * Creates an input.\n     * @param { number } options - Options object to use.\n     * @param { Sprite | Graphics | string } options.bg - Background of the Input.\n     * @param { PixiTextStyle } options.textStyle - Text style of the Input.\n     * @param { string } options.placeholder - Placeholder of the Input.\n     * @param { string } options.value - Value of the Input.\n     * @param { number } options.maxLength - Max length of the Input.\n     * @param { 'left' | 'center' | 'right' } options.align - Align of the Input.\n     * @param { Padding } options.padding - Padding of the Input.\n     * @param { number } options.padding.top - Top padding of the Input.\n     * @param { number } options.padding.right - Right padding of the Input.\n     * @param { number } options.padding.bottom - Bottom padding of the Input.\n     * @param { number } options.padding.left - Left padding of the Input.\n     * @param { boolean } options.cleanOnFocus - Clean Input on focus.\n     * @param { Array } options.nineSliceSprite - NineSliceSprite values for bg and fill ([number, number, number, number]).\n     */\n    constructor(options: InputOptions)\n    {\n        super();\n\n        this.options = options;\n\n        this.options = options;\n        this.padding = options.padding;\n\n        this.cursor = 'text';\n        this.interactive = true;\n\n        this.on('pointertap', () =>\n        {\n            this.activation = true;\n            isMobile.any && this.handleActivation(); // handleActivation always call before this function called.\n        });\n\n        if (isMobile.any)\n        {\n            window.addEventListener('touchstart', this.handleActivationBinding);\n        }\n        else if (!isMobile.any)\n        {\n            window.addEventListener('click', this.handleActivationBinding);\n\n            window.addEventListener('keyup', this.onKeyUpBinding);\n\n            window.addEventListener('input', this.onInputBinding as EventListener);\n        }\n\n        this.onEnter = new Signal();\n        this.onChange = new Signal();\n\n        Ticker.shared.add((ticker) => this.update(ticker.deltaTime));\n\n        if (options.bg)\n        {\n            this.bg = options.bg;\n        }\n        else\n        {\n            console.error('Input: bg is not defined, please define it.');\n        }\n    }\n\n    protected onInput(e: InputEvent)\n    {\n        this.lastInputData = e.data;\n    }\n\n    protected onKeyUp(e: KeyboardEvent)\n    {\n        const key = e.key;\n\n        if (key === 'Backspace')\n        {\n            this._delete();\n        }\n        else if (key === 'Escape' || key === 'Enter')\n        {\n            this.stopEditing();\n        }\n        else if (key.length === 1)\n        {\n            this._add(key);\n        }\n        else if (this.lastInputData && this.lastInputData.length === 1)\n        {\n            this._add(this.lastInputData);\n        }\n    }\n\n    protected init()\n    {\n        const options = this.options;\n\n        const defaultTextStyle = {\n            fill: 0x000000,\n            align: 'center'\n        } as TextStyleOptions;\n\n        this.options.textStyle = options.textStyle ?? defaultTextStyle;\n        this.options.TextClass = options.TextClass ?? Text;\n        const textStyle = { ...defaultTextStyle, ...options.textStyle };\n\n        this.inputField = new this.options.TextClass({ text: '', style: textStyle });\n\n        this._cursor = new Sprite(Texture.WHITE);\n\n        this._cursor.tint = Number((options.textStyle as AnyTextStyle).fill) || 0x000000;\n        this._cursor.anchor.set(0.5);\n        this._cursor.width = 2;\n        this._cursor.height = this.inputField.height * 0.8;\n        this._cursor.alpha = 0;\n\n        this.placeholder = new this.options.TextClass({ text: options.placeholder, style: textStyle ?? defaultTextStyle });\n        this.placeholder.visible = !!options.placeholder;\n\n        this.addChild(this.inputField, this.placeholder, this._cursor);\n\n        this.value = options.value ?? '';\n\n        this.align();\n    }\n\n    set bg(bg: ViewType)\n    {\n        if (this._bg)\n        {\n            this._bg.destroy();\n        }\n\n        if (this.options?.nineSliceSprite)\n        {\n            if (typeof bg === 'string')\n            {\n                this._bg = new NineSliceSprite({\n                    texture: Texture.from(bg),\n                    leftWidth: this.options.nineSliceSprite[0],\n                    topHeight: this.options.nineSliceSprite[1],\n                    rightWidth: this.options.nineSliceSprite[2],\n                    bottomHeight: this.options.nineSliceSprite[3],\n                });\n            }\n            else\n            {\n                console.warn('NineSliceSprite can not be used with views set as Container.');\n            }\n        }\n\n        if (!this._bg)\n        {\n            this._bg = getView(bg);\n        }\n\n        this._bg.cursor = 'text';\n        this._bg.interactive = true;\n\n        this.addChildAt(this._bg, 0);\n\n        if (!this.inputField)\n        {\n            this.init();\n        }\n\n        if (this.options.addMask)\n        {\n            if (this.inputMask)\n            {\n                this.inputField.mask = null;\n                this._cursor.mask = null;\n                this.inputMask.destroy();\n            }\n\n            if (this.options?.nineSliceSprite && typeof bg === 'string')\n            {\n                this.inputMask = new NineSliceSprite({\n                    texture: Texture.from(bg),\n                    leftWidth: this.options.nineSliceSprite[0],\n                    topHeight: this.options.nineSliceSprite[1],\n                    rightWidth: this.options.nineSliceSprite[2],\n                    bottomHeight: this.options.nineSliceSprite[3],\n                });\n            }\n            else\n                if (bg instanceof Sprite)\n                {\n                    this.inputMask = new Sprite(bg.texture);\n                }\n                else\n                    if (bg instanceof Graphics)\n                    {\n                        this.inputMask = bg.clone(true);\n                    }\n                    else\n                    {\n                        this.inputMask = getView(bg);\n                    }\n\n            this.inputField.mask = this.inputMask;\n\n            this._cursor.mask = this.inputMask;\n\n            this.addChildAt(this.inputMask, 0);\n        }\n    }\n\n    get bg(): Container | string\n    {\n        return this._bg;\n    }\n\n    protected _add(key: string): void\n    {\n        if (!this.editing)\n        {\n            return;\n        }\n\n        if (this.options.maxLength && this.value.length >= this.options.maxLength)\n        {\n            return;\n        }\n\n        this.value = this.value + key;\n\n        this.onChange.emit(this.value);\n    }\n\n    protected _delete(): void\n    {\n        if (!this.editing || this.value.length === 0) return;\n        const array = this.value.split('');\n\n        array.pop();\n        this.value = array.join('');\n\n        this.onChange.emit(this.value);\n    }\n\n    protected _startEditing(): void\n    {\n        if (this.options.cleanOnFocus)\n        {\n            this.value = '';\n        }\n\n        this.tick = 0;\n        this.editing = true;\n        this.placeholder.visible = false;\n        this._cursor.alpha = 1;\n\n        if (isMobile.any)\n        {\n            this.createInputField();\n        }\n\n        this.align();\n    }\n\n    protected createInputField()\n    {\n        if (this.input)\n        {\n            this.input.removeEventListener('blur', this.stopEditingBinding);\n            this.input.removeEventListener('keyup', this.onKeyUpBinding);\n            this.input.removeEventListener('input', this.onInputBinding as EventListener);\n\n            this.input?.blur();\n            this.input?.remove();\n            this.input = null;\n        }\n\n        const input: HTMLInputElement = document.createElement('input');\n\n        document.body.appendChild(input);\n\n        input.style.position = 'fixed';\n        input.style.left = `${this.getGlobalPosition().x}px`;\n        input.style.top = `${this.getGlobalPosition().y}px`;\n        input.style.opacity = '0.0000001';\n        input.style.width = `${this._bg.width}px`;\n        input.style.height = `${this._bg.height}px`;\n        input.style.border = 'none';\n        input.style.outline = 'none';\n        input.style.background = 'white';\n\n        // This hack fixes instant hiding keyboard on mobile after showing it\n        if (isMobile.android.device)\n        {\n            setTimeout(() =>\n            {\n                input.focus();\n                input.click();\n            }, 100);\n        }\n        else\n        {\n            input.focus();\n            input.click();\n        }\n\n        input.addEventListener('blur', this.stopEditingBinding);\n        input.addEventListener('keyup', this.onKeyUpBinding);\n        input.addEventListener('input', this.onInputBinding as EventListener);\n\n        this.input = input;\n\n        this.align();\n    }\n\n    protected handleActivation()\n    {\n        this.stopEditing();\n\n        if (this.activation)\n        {\n            this._startEditing();\n\n            this.activation = false;\n        }\n    }\n\n    protected stopEditing(): void\n    {\n        if (!this.editing) return;\n\n        this._cursor.alpha = 0;\n        this.editing = false;\n\n        if (this.inputField.text === '')\n        {\n            this.placeholder.visible = true;\n        }\n\n        if (this.value.length === 0) this.placeholder.visible = true;\n\n        if (isMobile.any)\n        {\n            this.input?.blur();\n            this.input?.remove();\n            this.input = null;\n        }\n\n        this.align();\n\n        this.onEnter.emit(this.value);\n    }\n\n    protected update(dt: number): void\n    {\n        if (!this.editing) return;\n        this.tick += dt * 0.1;\n        this._cursor.alpha = Math.round((Math.sin(this.tick) * 0.5) + 0.5);\n    }\n\n    protected align()\n    {\n        if (!this._bg) return;\n\n        const align = this.getAlign();\n\n        this.inputField.anchor.set(align, 0.5);\n        this.inputField.x = (this._bg.width * align) + (align === 1 ? -this.paddingRight : this.paddingLeft);\n        this.inputField.y = (this._bg.height / 2) + this.paddingTop - this.paddingBottom;\n\n        this.placeholder.anchor.set(align, 0.5);\n        this.placeholder.x = (this._bg.width * align) + (align === 1 ? -this.paddingRight : this.paddingLeft);\n        this.placeholder.y = this._bg.height / 2;\n\n        this._cursor.x = this.getCursorPosX();\n        this._cursor.y = this.inputField.y;\n    }\n\n    protected getAlign(): 0 | 1 | 0.5\n    {\n        const maxWidth = this._bg.width * 0.95;\n        const paddings = this.paddingLeft + this.paddingRight - 10;\n        const isOverflowed = this.inputField.width + paddings > maxWidth;\n\n        if (isOverflowed)\n        {\n            return this.editing ? 1 : 0;\n        }\n        switch (this.options.align)\n        {\n            case 'left':\n                return 0;\n            case 'center':\n                return 0.5;\n            case 'right':\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    protected getCursorPosX()\n    {\n        const align = this.getAlign();\n\n        switch (align)\n        {\n            case 0:\n                return this.inputField.x + this.inputField.width;\n            case 0.5:\n                return this.inputField.x + (this.inputField.width * 0.5);\n            case 1:\n                return this.inputField.x;\n            default:\n                return 0;\n        }\n    }\n\n    /** Sets the input text. */\n    set value(text: string)\n    {\n        this.inputField.text = text;\n\n        if (text.length !== 0)\n        {\n            this.placeholder.visible = false;\n        }\n        else\n        {\n            this.placeholder.visible = !this.editing;\n        }\n\n        this.align();\n    }\n\n    /** Return text of the input. */\n    get value(): string\n    {\n        return this.inputField.text;\n    }\n\n    /**\n     * Set paddings\n     * @param value - number, array of 4 numbers or object with keys: top, right, bottom, left\n     * or: [top, right, bottom, left]\n     * or: [top&bottom, right&left]\n     * or: {\n     *  left: 10,\n     *  right: 10,\n     *  top: 10,\n     *  bottom: 10,\n     * }\n     */\n    set padding(value: Padding)\n    {\n        if (typeof value === 'number')\n        {\n            this.paddingTop = value;\n            this.paddingRight = value;\n            this.paddingBottom = value;\n            this.paddingLeft = value;\n        }\n\n        if (Array.isArray(value))\n        {\n            this.paddingTop = value[0] ?? 0;\n            this.paddingRight = value[1] ?? value[0] ?? 0;\n            this.paddingBottom = value[2] ?? value[0] ?? 0;\n            this.paddingLeft = value[3] ?? value[1] ?? value[0] ?? 0;\n        }\n        else if (typeof value === 'object')\n        {\n            this.paddingTop = value.top ?? 0;\n            this.paddingRight = value.right ?? 0;\n            this.paddingBottom = value.bottom ?? 0;\n            this.paddingLeft = value.left ?? 0;\n        }\n    }\n\n    // Return array of paddings [top, right, bottom, left]\n    get padding(): [number, number, number, number]\n    {\n        return [this.paddingTop, this.paddingRight, this.paddingBottom, this.paddingLeft];\n    }\n\n    override destroy(options?: DestroyOptions | boolean)\n    {\n        this.off('pointertap');\n\n        if (isMobile.any)\n        {\n            window.removeEventListener('touchstart', this.handleActivationBinding);\n        }\n        else if (!isMobile.any)\n        {\n            window.removeEventListener('click', this.handleActivationBinding);\n\n            window.removeEventListener('keyup', this.onKeyUpBinding);\n\n            window.removeEventListener('input', this.onInputBinding as EventListener);\n        }\n\n        super.destroy(options);\n    }\n\n    /**\n     * Sets width of a Input.\n     * If nineSliceSprite is set, then width will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then width will control components width as Container.\n     * @param width - Width value.\n     */\n    override set width(width: number)\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this._bg)\n            {\n                this._bg.width = width;\n            }\n\n            if (this.inputMask)\n            {\n                this.inputMask.width = width - this.paddingLeft - this.paddingRight;\n                this.inputMask.x = this.paddingLeft;\n            }\n\n            this.align();\n        }\n        else\n        {\n            super.width = width;\n        }\n    }\n\n    /** Gets width of Input. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a Input.\n     * If nineSliceSprite is set, then height will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then height will control components height as Container.\n     * @param height - Height value.\n     */\n    override set height(height: number)\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this._bg)\n            {\n                this._bg.height = height;\n            }\n\n            if (this.inputMask)\n            {\n                this.inputMask.height = height - this.paddingTop - this.paddingBottom;\n                this.inputMask.y = this.paddingTop;\n            }\n\n            this.align();\n        }\n        else\n        {\n            super.height = height;\n        }\n    }\n\n    /** Gets height of Input. */\n    override get height(): number\n    {\n        return super.height;\n    }\n\n    override setSize(value: number | Optional<Size, 'height'>, height?: number): void\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this._bg)\n            {\n                this._bg.setSize(value, height);\n            }\n\n            if (this.inputMask)\n            {\n                if (typeof value === 'object')\n                {\n                    height = value.height ?? value.width;\n                    value = value.width;\n                }\n                else\n                {\n                    height = height ?? value;\n                }\n\n                this.inputMask.setSize(\n                    value - this.paddingLeft - this.paddingRight,\n                    height - this.paddingTop - this.paddingBottom\n                );\n                this.inputMask.position.set(this.paddingLeft, this.paddingTop);\n            }\n\n            this.align();\n        }\n        else\n        {\n            super.setSize(value, height);\n        }\n    }\n}\n", "import { Container, ContainerChild } from 'pixi.js';\n\nexport type ListType = 'horizontal' | 'vertical';\n\nexport type ListOptions<C extends ContainerChild = ContainerChild> = {\n    elementsMargin?: number;\n    children?: C[];\n    padding?: number;\n    vertPadding?: number;\n    horPadding?: number;\n    topPadding?: number;\n    bottomPadding?: number;\n    leftPadding?: number;\n    rightPadding?: number;\n    items?: C[];\n};\n\n/**\n * Container-based component for arranging Pixi containers one after another based on their sizes.\n *\n * Type option is used to set the direction of the arrangement.\n *\n * If type is not specified, it will be acting like a bidirectional, items will be arranged to fit horizontally,\n * after there is no space left, new line will be started, so items will be arranged like `inline-block` in css.\n *\n * It is used inside elements with repeatable content, like {@link Select} or {@link ScrollBox}.\n * @example\n * const list = new List({\n *    children: [\n        new Graphics().rect(0, 0, 50, 50).fill(0x000000),\n        new Graphics().rect(0, 0, 50, 50).fill(0xFFFFFF),\n *    ],\n * });\n *\n * list.addChild(new Graphics().rect(0, 0, 50, 50)).fill(0x000000);\n */\nexport class List<C extends ContainerChild = ContainerChild> extends Container<C>\n{\n    protected options?: { type?: ListType } & ListOptions<C>;\n\n    /** Container, that holds all inner elements. */\n    view: Container;\n\n    /** Arrange direction. */\n    protected _type: ListType;\n\n    /** Returns all arranged elements. */\n    override readonly children: C[] = [];\n\n    constructor(options?: { type?: ListType } & ListOptions<C>)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        options?.items?.forEach((item) => this.addChild(item));\n\n        this.on('added', () => this.arrangeChildren());\n        this.on('childAdded', () => this.arrangeChildren());\n    }\n\n    /**\n     * Initiates list component.\n     * @param options\n     */\n    init(options?: { type?: ListType } & ListOptions<C>)\n    {\n        this.options = options;\n\n        if (options?.type)\n        {\n            this.type = options.type;\n        }\n\n        if (options?.children)\n        {\n            options.children.forEach((child) => this.addChild(child));\n        }\n    }\n\n    /**\n     * Set items arrange direction.\n     * @param type - Arrange direction.\n     */\n    set type(type: ListType)\n    {\n        this._type = type;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get items arrange direction.\n     * @returns Arrange direction.\n     */\n    get type(): ListType\n    {\n        return this._type;\n    }\n\n    /**\n     * Set element margin.\n     * @param margin - Margin between elements.\n     */\n    set elementsMargin(margin: number)\n    {\n        if (!this.options) throw new Error('List has not been initiated!');\n        this.options.elementsMargin = margin;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get element margin.\n     * @returns Margin between elements.\n     */\n    get elementsMargin(): number\n    {\n        return this.options?.elementsMargin ?? 0;\n    }\n\n    /**\n     * Set padding, overriding all padding options.\n     * @param padding - Padding surrounding list elements and its border.\n     */\n    set padding(padding: number)\n    {\n        if (!this.options) throw new Error('List has not been initiated!');\n        this.options.padding = padding;\n        this.options.vertPadding = padding;\n        this.options.horPadding = padding;\n        this.options.leftPadding = padding;\n        this.options.rightPadding = padding;\n        this.options.topPadding = padding;\n        this.options.bottomPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get padding.\n     * @returns Padding surrounding list elements and its border.\n     */\n    get padding(): number\n    {\n        return this.options?.padding ?? 0;\n    }\n\n    /**\n     * Set vertical padding, overriding all top and bottom padding options.\n     * @param padding - Vertical padding between list border and its elements.\n     */\n    set vertPadding(padding: number)\n    {\n        if (!this.options) throw new Error('List has not been initiated!');\n        this.options.vertPadding = padding;\n        this.options.topPadding = padding;\n        this.options.bottomPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get vertical padding.\n     * @returns Vertical padding between list border and its elements.\n     */\n    get vertPadding(): number\n    {\n        return this.options?.vertPadding ?? this.padding ?? 0;\n    }\n\n    /**\n     * Set horizontal padding, overriding all left and right padding options.\n     * @param padding - Horizontal padding between list border and its elements.\n     */\n    set horPadding(padding: number)\n    {\n        if (!this.options) throw new Error('List has not been initiated!');\n        this.options.horPadding = padding;\n        this.options.leftPadding = padding;\n        this.options.rightPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get horizontal padding.\n     * @returns Horizontal padding between list border and its elements.\n     */\n    get horPadding(): number\n    {\n        return this.options?.horPadding ?? this.padding ?? 0;\n    }\n\n    /**\n     * Set left padding.\n     * @param padding - Left padding between list border and its elements.\n     */\n    set leftPadding(padding: number)\n    {\n        if (!this.options) throw new Error('List has not been initiated!');\n        this.options.leftPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get left padding.\n     * @returns Left padding between list border and its elements.\n     */\n    get leftPadding(): number\n    {\n        return this.options?.leftPadding ?? this.horPadding;\n    }\n\n    /**\n     * Set right padding.\n     * @param padding - Right padding between list border and its elements.\n     */\n    set rightPadding(padding: number)\n    {\n        if (!this.options) throw new Error('List has not been initiated!');\n        this.options.rightPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get right padding.\n     * @returns Right padding between list border and its elements.\n     */\n    get rightPadding(): number\n    {\n        return this.options?.rightPadding ?? this.horPadding;\n    }\n\n    /**\n     * Set top padding.\n     * @param padding - Top padding between list border and its elements.\n     */\n    set topPadding(padding: number)\n    {\n        if (!this.options) throw new Error('List has not been initiated!');\n        this.options.topPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get top padding.\n     * @returns Top padding between list border and its elements.\n     */\n    get topPadding(): number\n    {\n        return this.options?.topPadding ?? this.vertPadding;\n    }\n\n    /**\n     * Set bottom padding.\n     * @param padding - Bottom padding between list border and its elements.\n     */\n    set bottomPadding(padding: number)\n    {\n        if (!this.options) throw new Error('List has not been initiated!');\n        this.options.bottomPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get bottom padding.\n     * @returns Bottom padding between list border and its elements.\n     */\n    get bottomPadding(): number\n    {\n        return this.options?.bottomPadding ?? this.vertPadding;\n    }\n\n    /**\n     * Arrange all elements basing in their sizes and component options.\n     * Can be arranged vertically, horizontally or bidirectional.\n     */\n    public arrangeChildren()\n    {\n        let maxHeight = 0;\n        let x = this.leftPadding;\n        let y = this.topPadding;\n\n        const elementsMargin = this.options?.elementsMargin ?? 0;\n        let maxWidth = this.parent?.width;\n\n        if (this.rightPadding)\n        {\n            maxWidth -= this.rightPadding;\n        }\n\n        this.children.forEach((child, id) =>\n        {\n            switch (this.type)\n            {\n                case 'vertical':\n                    child.y = y;\n                    child.x = x;\n\n                    y += elementsMargin + child.height;\n                    break;\n\n                case 'horizontal':\n                    child.x = x;\n                    child.y = y;\n\n                    x += elementsMargin + child.width;\n                    break;\n\n                default: // bidirectional\n                    child.x = x;\n                    child.y = y;\n\n                    if (child.x + child.width > maxWidth && id > 0)\n                    {\n                        y += elementsMargin + maxHeight;\n                        x = this.leftPadding;\n\n                        child.x = x;\n                        child.y = y;\n                        maxHeight = 0;\n                    }\n\n                    maxHeight = Math.max(maxHeight, child.height);\n                    x += elementsMargin + child.width;\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Removes items from the list. (Does not destroy them)\n     * @param itemID - Item to remove (starting from 0).\n     */\n    removeItem(itemID: number)\n    {\n        const child = this.children[itemID];\n\n        if (!child)\n        {\n            return;\n        }\n\n        this.removeChild(child);\n        this.arrangeChildren();\n    }\n}\n", "import { Container, FillStyleInputs, Graphics, Sprite } from 'pixi.js';\nimport { getView } from './utils/helpers/view';\n\nexport type MaskedFrameOptions = {\n    target?: string | Container;\n    mask?: string | Graphics;\n    borderWidth?: number;\n    borderColor?: FillStyleInputs;\n};\n\n/**\n * Draws a border or apply a mask of any shape to a container.\n * @example\n * new MaskedFrame({\n *     target: `avatar.png`,\n *     mask: `avatar_mask.png`,\n *     borderWidth: 5,\n *     borderColor: 0xFFFFFF,\n * });\n */\nexport class MaskedFrame extends Container\n{\n    /** Target container. */\n    target: Container;\n    border = new Graphics();\n    protected _targetMask: Container;\n    protected maskData: string | Graphics;\n    protected borderWidth: number;\n    protected borderColor: FillStyleInputs;\n\n    constructor(options?: MaskedFrameOptions)\n    {\n        super();\n\n        if (options?.target)\n        {\n            this.init(options);\n        }\n    }\n\n    /**\n     * Initializes a component.\n     * @param root0\n     * @param root0.target - Container to apply a mask or a border.\n     * @param root0.mask - Mask.\n     * @param root0.borderWidth - Border width.\n     * @param root0.borderColor - Border color.\n     */\n    init({ target, mask, borderWidth, borderColor }: MaskedFrameOptions)\n    {\n        if (this.target)\n        {\n            this.removeChild(this.target);\n        }\n\n        this.target = getView(target);\n        this.addChild(this.border, this.target);\n\n        if (mask) this.setMask(mask);\n        if (borderWidth) this.setBorder(borderWidth, borderColor);\n    }\n\n    /**\n     * Applies a mask to a target container.\n     * @param mask\n     */\n    setMask(mask: string | Graphics)\n    {\n        this.maskData = mask;\n\n        this._targetMask = getView(mask);\n        this.addChild(this._targetMask);\n        this.target.mask = this._targetMask;\n    }\n\n    /**\n     * Shows a border around the target Container, same shape as the mask.\n     * @param borderWidth\n     * @param borderColor\n     */\n    setBorder(borderWidth: number, borderColor: FillStyleInputs)\n    {\n        this.borderWidth = borderWidth;\n        this.borderColor = borderColor;\n\n        this.showBorder();\n\n        if (this.maskData)\n        {\n            const borderMask = typeof this.maskData === 'string' ? Sprite.from(this.maskData) : this.maskData.clone(true);\n\n            borderMask.width += borderWidth * 2;\n            borderMask.height += borderWidth * 2;\n\n            this.mask = borderMask;\n            this.addChild(borderMask);\n            this._targetMask.position.set(borderWidth);\n        }\n    }\n\n    /** Hides a border. */\n    showBorder()\n    {\n        const width = this.borderWidth * 2;\n\n        this.border.clear()\n            .rect(0, 0, this.target.width + width, this.target.height + width)\n            .fill(this.borderColor);\n\n        this.target.x = this.borderWidth;\n        this.target.y = this.borderWidth;\n    }\n\n    /** Hides a border. */\n    hideBorder()\n    {\n        this.border.clear();\n    }\n}\n", "import { Container } from 'pixi.js';\nimport { Signal } from 'typed-signals';\nimport { CheckBox } from './CheckBox';\nimport { List, ListType } from './List';\n\nexport type RadioBoxOptions = {\n    items: CheckBox[];\n    type: ListType;\n    elementsMargin: number;\n    selectedItem?: number;\n};\n\n/**\n * Creates a container-based controlling wrapper for checkbox elements,\n * for them top behave as radio buttons.\n *\n * Only one checkbox/radio button can be selected at a time.\n *\n * List of items is passed as an array of {@link CheckBox} objects.\n * @example\n * new RadioGroup({\n *     items: [\n *          new CheckBox({\n *              style: {\n *                  unchecked: `switch_off.png`,\n *                  checked: `switch_on.png`,\n *              }\n *          }),\n *         new CheckBox({\n *              style: {\n *                  unchecked: `switch_off.png`,\n *                  checked: `switch_on.png`,\n *              }\n *          }),\n *          new CheckBox({\n *              style: {\n *                  unchecked: `switch_off.png`,\n *                  checked: `switch_on.png`,\n *              }\n *          }),\n *     ],\n *     type: 'vertical'\n * });\n */\nexport class RadioGroup extends Container\n{\n    protected items: CheckBox[] = [];\n\n    /** {@link List}, that holds and control all inned checkboxes.  */\n    innerView: List;\n\n    /** Text value of the selected item. */\n    value: string;\n\n    /** ID of the selected item. */\n    selected: number;\n\n    /** Fires, when new item is selected. */\n    onChange: Signal<(selectedItemID: number, selectedVal: string) => void>;\n\n    protected options: RadioBoxOptions;\n\n    constructor(options?: RadioBoxOptions)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        this.onChange = new Signal();\n    }\n\n    /**\n     * Initiates a group.\n     * @param options\n     */\n    init(options: RadioBoxOptions)\n    {\n        this.options = options;\n\n        this.value = options.items[options.selectedItem || 0].labelText?.text;\n\n        this.selected = options.selectedItem ?? 0; // first item by default\n\n        if (this.innerView)\n        {\n            this.innerView.type = options.type;\n            this.innerView.elementsMargin = options.elementsMargin;\n        }\n        else\n        {\n            this.innerView = new List({\n                type: options.type,\n                elementsMargin: options.elementsMargin\n            });\n        }\n\n        this.addItems(options.items);\n\n        this.addChild(this.innerView);\n\n        this.selectItem(this.selected);\n    }\n\n    /**\n     * Add items to a group.\n     * @param {CheckBox[]} items - array of {@link CheckBox} instances.\n     */\n    addItems(items: CheckBox[])\n    {\n        items.forEach((checkBox, id) =>\n        {\n            checkBox.onChange.connect(() => this.selectItem(id));\n\n            this.items.push(checkBox);\n\n            this.innerView.addChild(checkBox);\n        });\n    }\n\n    /**\n     * Remove items from a group.\n     * @param ids\n     */\n    removeItems(ids: number[])\n    {\n        ids.forEach((id) =>\n        {\n            const item = this.items[id];\n\n            if (!item) return;\n\n            item.onChange.disconnectAll();\n\n            this.innerView.removeChild(item);\n\n            this.items.splice(id, 1);\n        });\n    }\n\n    /**\n     * Select item by ID.\n     * @param id\n     */\n    selectItem(id: number)\n    {\n        this.items.forEach((item, key) =>\n        {\n            item.forceCheck(key === id);\n        });\n\n        if (this.selected !== id)\n        {\n            this.onChange.emit(id, this.items[id].labelText?.text);\n        }\n\n        this.value = this.options.items[id].labelText?.text;\n        this.selected = id;\n    }\n}\n", "export interface SpringOptions\n{\n    max?: number;\n    damp?: number;\n    springiness?: number;\n}\n\nexport class Spring\n{\n    x: number;\n    ax: number;\n    dx: number;\n    tx: number;\n\n    protected _options: SpringOptions;\n\n    constructor(options: SpringOptions = {})\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n\n        // add opts to object for shared opts.\n        this._options = options;\n        this._options.max = options.max || 160;\n        this._options.damp = options.damp || 0.8;\n        this._options.springiness = options.springiness || 0.1;\n    }\n\n    update(): void\n    {\n        this.ax = (this.tx - this.x) * this._options.springiness;\n\n        this.dx += this.ax;\n        this.dx *= this._options.damp;\n\n        if (this.dx < -this._options.max) this.dx = -this._options.max;\n        else if (this.dx > this._options.max) this.dx = this._options.max;\n\n        this.x += this.dx;\n    }\n\n    reset(): void\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n    }\n\n    get max(): number\n    {\n        return this._options.max;\n    }\n\n    set max(value: number)\n    {\n        this._options.max = value;\n    }\n\n    get damp(): number\n    {\n        return this._options.damp;\n    }\n\n    set damp(value: number)\n    {\n        this._options.damp = value;\n    }\n\n    get springiness(): number\n    {\n        return this._options.springiness;\n    }\n\n    set springiness(value: number)\n    {\n        this._options.springiness = value;\n    }\n}\n", "import { Spring } from './Spring';\n\nexport default class ScrollSpring\n{\n    done: boolean;\n    to: number;\n\n    protected _spring: Spring;\n    protected _pos: number;\n    protected _speed: number;\n    protected _correctSpeed: boolean;\n\n    constructor()\n    {\n        this._spring = new Spring();\n        this._pos = 0;\n        this.to = 0;\n    }\n\n    start(speed: number, pos: number, to: number): void\n    {\n        this._speed = speed;\n        this._pos = pos;\n        this.to = to;\n        this.done = false;\n\n        this._spring.x = this._pos;\n        this._spring.tx = this.to;\n\n        const diff = this.to - this._pos;\n        const toDirection = Math.abs(diff) / diff;\n        const currentDirection = Math.abs(this._speed) / this._speed;\n\n        if (toDirection !== currentDirection)\n        {\n            this._correctSpeed = true;\n        }\n        else\n        {\n            this._correctSpeed = false;\n        }\n    }\n\n    update(): number\n    {\n        if (this._correctSpeed)\n        {\n            this._speed *= 0.6;\n\n            if (Math.abs(this._speed) < 2)\n            {\n                this._correctSpeed = false;\n            }\n\n            this._pos += this._speed;\n\n            this._spring.x = this._pos;\n        }\n        else\n        {\n            const diff = this.to - this._pos;\n\n            if (Math.abs(diff) < 0.05)\n            {\n                this._pos = this.to;\n                this.done = true;\n            }\n            else\n            {\n                this._spring.tx = this.to;\n                this._spring.update();\n                this._pos = this._spring.x;\n            }\n        }\n\n        return this._pos;\n    }\n\n    cancel(): void\n    {\n    // matches jux interface\n    }\n}\n", "import ScrollSpring from './ScrollSpring';\n\nexport interface SlidingNumberOptions\n{\n    constrain?: boolean;\n    maxSpeed?: number;\n    ease?: ConstrainEase;\n}\n\nexport interface ConstrainEase\n{\n    done: boolean;\n    to: number;\n    start(speed: number, pos: number, to: number): void;\n    update(): number;\n}\n\nexport class SlidingNumber\n{\n    position = 0;\n    constrain = true;\n    min = 0; // the window width of the drag\n    max = 0; // the window width of the drag\n    maxSpeed = 400;\n\n    protected _ease: ConstrainEase;\n\n    protected _offset = 0;\n    protected _prev = 0;\n    protected _speed = 0;\n    protected _hasStopped: boolean;\n\n    protected _targetSpeed = 0;\n    protected _speedChecker = 0;\n    protected _grab = 0;\n    protected _activeEase: ConstrainEase;\n\n    constructor(options: SlidingNumberOptions = {})\n    {\n        this.constrain = options.constrain ?? true;\n        this.maxSpeed = options.maxSpeed ?? 400;\n        this._ease = options.ease ?? new ScrollSpring();\n    }\n\n    set value(n: number)\n    {\n        this._speed = 0;\n        this.position = n;\n    }\n\n    get value(): number\n    {\n        return this.position;\n    }\n\n    grab(offset: number): void\n    {\n        this._grab = offset;\n        this._offset = this.position - offset;\n        this._speedChecker = 0;\n        this._targetSpeed = this._speed = 0;\n        this._hasStopped = false;\n    }\n\n    hold(newPosition: number): void\n    {\n        this._speedChecker++;\n\n        this.position = newPosition + this._offset;\n\n        if (this._speedChecker > 1)\n        {\n            this._targetSpeed = this.position - this._prev;\n        }\n\n        this._speed += (this._targetSpeed - this._speed) / 2;\n\n        if (this._speed > this.maxSpeed) this._speed = this.maxSpeed;\n        else if (this._speed < -this.maxSpeed) this._speed = -this.maxSpeed;\n\n        this._prev = this.position;\n\n        if (this.constrain)\n        {\n            this._activeEase = null;\n\n            if (this.position > this.min)\n            {\n                this.position -= (this.position - this.min) / 1.5;\n            }\n            else if (this.position < this.max)\n            {\n                this.position += (this.max - this.position) / 1.5;\n            }\n        }\n    }\n\n    slide(instant = false): void\n    {\n        if (this._hasStopped) return;\n\n        if (this.constrain)\n        {\n            this._updateConstrain(instant);\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n\n    get moveAmount(): number\n    {\n        return -(this.position - this._offset - this._grab);\n    }\n\n    protected _updateDefault(): void\n    {\n        this._speed *= 0.9;\n        this.position += this._speed;\n\n        if ((this._speed < 0 ? this._speed * -1 : this._speed) < 0.01)\n        {\n            this._hasStopped = true;\n        }\n    }\n\n    protected _updateConstrain(instant = false): void\n    {\n        const max: number = this.max;\n\n        if (instant)\n        {\n            if (this.value > 0)\n            {\n                this.value = 0;\n            }\n\n            if (this.value > 0)\n            {\n                this.value = 0;\n            }\n\n            if (this.value < this.max)\n            {\n                this.value = this.max;\n            }\n\n            if (this.value < this.max)\n            {\n                this.value = this.max;\n            }\n        }\n        else if (this.position > this.min || this.position < max || this._activeEase)\n        {\n            if (!this._activeEase)\n            {\n                this._activeEase = this._ease;\n\n                if (this.position > this.min)\n                {\n                    this._activeEase.start(this._speed, this.position, this.min);\n                }\n                else\n                {\n                    this._activeEase.start(this._speed, this.position, max);\n                }\n            }\n\n            this.position = this._activeEase.update();\n\n            if (this._activeEase.done)\n            {\n                this.position = this._activeEase.to;\n                this._speed = 0;\n                this._activeEase = null;\n            }\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n}\n", "import { Point, Rectangle } from 'pixi.js';\nimport { ConstrainEase, SlidingNumber } from './SlidingNumber';\n\ninterface TrackpadOptions\n{\n    /** override the easing function when constraining */\n    xEase?: ConstrainEase;\n    yEase?: ConstrainEase;\n\n    maxSpeed?: number;\n    constrain?: boolean;\n\n    disableEasing?: boolean;\n}\n\n/** Easing controller for the {@link ScrollBox}. */\nexport class Trackpad\n{\n    xAxis: SlidingNumber;\n    yAxis: SlidingNumber;\n\n    protected _isDown: boolean;\n    protected _globalPosition: Point;\n    protected _frame: Rectangle;\n    protected _bounds: Rectangle;\n    protected _dirty: boolean;\n    protected disableEasing = false;\n\n    constructor(options: TrackpadOptions)\n    {\n        this.xAxis = new SlidingNumber({\n            ease: options.xEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain\n        });\n\n        this.yAxis = new SlidingNumber({\n            ease: options.yEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain\n        });\n\n        this.disableEasing = options.disableEasing ?? false;\n\n        this._frame = new Rectangle();\n\n        this._bounds = new Rectangle();\n        this._globalPosition = new Point();\n    }\n\n    pointerDown(pos: Point): void\n    {\n        this._globalPosition = pos;\n        this.xAxis.grab(pos.x);\n        this.yAxis.grab(pos.y);\n        this._isDown = true;\n    }\n\n    pointerUp(): void\n    {\n        this._isDown = false;\n    }\n\n    pointerMove(pos: Point): void\n    {\n        this._globalPosition = pos;\n    }\n\n    update(): void\n    {\n        if (this._dirty)\n        {\n            this._dirty = false;\n\n            this.xAxis.min = this._bounds.left;\n            this.xAxis.min = this._bounds.right - this._frame.width;\n\n            this.xAxis.min = this._bounds.top;\n            this.xAxis.min = this._bounds.bottom - this._frame.height;\n        }\n\n        if (this._isDown)\n        {\n            this.xAxis.hold(this._globalPosition.x);\n            this.yAxis.hold(this._globalPosition.y);\n        }\n        else\n        {\n            this.xAxis.slide(this.disableEasing);\n            this.yAxis.slide(this.disableEasing);\n        }\n    }\n\n    resize(w: number, h: number): void\n    {\n        this._frame.x = 0;\n        this._frame.width = w;\n\n        this._frame.y = 0;\n        this._frame.height = h;\n\n        this._dirty = true;\n    }\n\n    setBounds(minX: number, maxX: number, minY: number, maxY: number): void\n    {\n        this._bounds.x = minX;\n        this._bounds.width = maxX - minX;\n        this._bounds.y = minY;\n        this._bounds.height = maxY - minY;\n\n        this._dirty = true;\n    }\n\n    get x(): number\n    {\n        return this.xAxis.value;\n    }\n\n    get y(): number\n    {\n        return this.yAxis.value;\n    }\n}\n", "import {\n    ColorSource,\n    Container,\n    DestroyOptions,\n    EventMode,\n    FederatedPointerEvent,\n    Graphics,\n    isMobile,\n    Optional,\n    Point,\n    PointData,\n    Size,\n    Ticker,\n} from 'pixi.js';\nimport { Signal } from 'typed-signals';\nimport { List } from './List';\nimport { Trackpad } from './utils/trackpad/Trackpad';\n\nimport type { ListOptions, ListType } from './List';\n\nexport type ScrollBoxOptions = {\n    width: number;\n    height: number;\n    background?: ColorSource;\n    type?: ListType;\n    radius?: number;\n    disableDynamicRendering?: boolean;\n    disableEasing?: boolean;\n    dragTrashHold?: number;\n    globalScroll?: boolean;\n    shiftScroll?: boolean;\n    proximityRange?: number;\n    proximityDebounce?: number;\n    disableProximityCheck?: boolean;\n} & Omit<ListOptions, 'children'>;\n\ntype ProximityEventData = {\n    item: Container;\n    index: number;\n    inRange: boolean;\n};\n\n/**\n * Scrollable view, for arranging lists of Pixi container-based elements.\n *\n * Items, that are out of the visible area, are not rendered by default.\n * This behavior can be changed by setting 'disableDynamicRendering' option to true.\n * @example\n * new ScrollBox({\n *     background: 0XFFFFFF,\n *     width: 200,\n *     height: 300,\n *     items: [\n *         new Graphics().drawRect(0, 0, 200, 50).fill(0x000000),\n *         new Graphics().drawRect(0, 0, 200, 50).fill(0x000000),\n *         new Graphics().drawRect(0, 0, 200, 50).fill(0x000000),\n *         new Graphics().drawRect(0, 0, 200, 50).fill(0x000000),\n *         new Graphics().drawRect(0, 0, 200, 50).fill(0x000000),\n *         new Graphics().drawRect(0, 0, 200, 50).fill(0x000000),\n *         new Graphics().drawRect(0, 0, 200, 50).fill(0x000000),\n *     ],\n * });\n */\n\nexport class ScrollBox extends Container\n{\n    protected background: Graphics;\n    protected borderMask: Graphics;\n    protected lastWidth: number;\n    protected lastHeight: number;\n    protected __width = 0;\n    protected __height = 0;\n    protected _dimensionChanged = false;\n\n    protected list: List;\n\n    protected _trackpad: Trackpad;\n    protected isDragging = 0;\n    protected interactiveStorage: {\n        item: Container;\n        eventMode: EventMode;\n    }[] = [];\n    protected visibleItems: Container[] = [];\n    protected pressedChild: Container;\n    protected ticker = Ticker.shared;\n    protected options: ScrollBoxOptions;\n    protected stopRenderHiddenItemsTimeout!: NodeJS.Timeout;\n    protected onMouseScrollBinding = this.onMouseScroll.bind(this);\n    protected dragStarTouchPoint: Point;\n    protected isOver = false;\n\n    protected proximityRange: number;\n    protected proximityStatusCache: boolean[] = [];\n    protected lastScrollX!: number | null;\n    protected lastScrollY!: number | null;\n    protected proximityCheckFrameCounter = 0;\n    public onProximityChange = new Signal<(data: ProximityEventData) => void>();\n    public onScroll: Signal<(value: number) => void> = new Signal();\n\n    /**\n     * @param options\n     * @param {number} options.background - background color of the ScrollBox.\n     * @param {number} options.width - width of the ScrollBox.\n     * @param {number} options.height - height of the ScrollBox.\n     * @param {number} options.radius - radius of the ScrollBox and its masks corners.\n     * @param {number} options.elementsMargin - margin between elements.\n     * @param {number} options.vertPadding - vertical padding of the ScrollBox.\n     * @param {number} options.horPadding - horizontal padding of the ScrollBox.\n     * @param {number} options.padding - padding of the ScrollBox (same horizontal and vertical).\n     * @param {boolean} options.disableDynamicRendering - disables dynamic rendering of the ScrollBox,\n     * so even elements the are not visible will be rendered. Be careful with this options as it can impact performance.\n     * @param {boolean} [options.globalScroll=true] - if true, the ScrollBox will scroll even if the mouse is not over it.\n     * @param {boolean} [options.shiftScroll=false] - if true, the ScrollBox will only scroll horizontally if the shift key\n     * is pressed, and the type is set to 'horizontal'.\n     */\n    constructor(options?: ScrollBoxOptions)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        this.ticker.add(this.update, this);\n    }\n\n    /**\n     * Initiates ScrollBox.\n     * @param options\n     * @param {number} options.background - background color of the ScrollBox.\n     * @param {number} options.width - width of the ScrollBox.\n     * @param {number} options.height - height of the ScrollBox.\n     * @param {number} options.radius - radius of the ScrollBox and its masks corners.\n     * @param {number} options.elementsMargin - margin between elements.\n     * @param {number} options.vertPadding - vertical padding of the ScrollBox.\n     * @param {number} options.horPadding - horizontal padding of the ScrollBox.\n     * @param {number} options.padding - padding of the ScrollBox (same horizontal and vertical).\n     * @param {boolean} options.disableDynamicRendering - disables dynamic rendering of the ScrollBox,\n     * so even elements the are not visible will be rendered. Be careful with this options as it can impact performance.\n     * @param {boolean} [options.globalScroll=true] - if true, the ScrollBox will scroll even if the mouse is not over it.\n     * @param {boolean} [options.shiftScroll=false] - if true, the ScrollBox will only scroll horizontally if the shift key\n     */\n    init(options: ScrollBoxOptions)\n    {\n        this.options = options;\n        this.setBackground(options.background);\n\n        this.__width = options.width | this.background.width;\n        this.__height = options.height | this.background.height;\n\n        this.proximityRange = options.proximityRange ?? 0;\n\n        if (!this.list)\n        {\n            this.list = new List();\n\n            super.addChild(this.list);\n        }\n\n        this.list.init({\n            type: options.type,\n            elementsMargin: options.elementsMargin,\n            padding: options.padding,\n            vertPadding: options.vertPadding,\n            horPadding: options.horPadding,\n            topPadding: options.topPadding,\n            bottomPadding: options.bottomPadding,\n            leftPadding: options.leftPadding,\n            rightPadding: options.rightPadding,\n        });\n\n        this.addItems(options.items);\n\n        if (this.hasBounds)\n        {\n            this.addMask();\n            this.makeScrollable();\n        }\n\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n\n        this.options.globalScroll = options.globalScroll ?? true;\n        this.options.shiftScroll = options.shiftScroll ?? false;\n        this.resize();\n    }\n\n    protected get hasBounds(): boolean\n    {\n        return !!this.__width || !!this.__height;\n    }\n\n    /**\n     *  Adds array of items to a scrollable list.\n     * @param {Container[]} items - items to add.\n     */\n    addItems(items: Container[])\n    {\n        if (!items?.length) return;\n\n        items.forEach((item) => this.addItem(item));\n    }\n\n    /** Remove all items from a scrollable list. */\n    removeItems()\n    {\n        this.proximityStatusCache.length = 0;\n        this.list.removeChildren();\n    }\n\n    /**\n     * Adds one or more items to a scrollable list.\n     * @param {Container} items - one or more items to add.\n     */\n    addItem<T extends Container[]>(...items: T): T[0]\n    {\n        if (items.length > 1)\n        {\n            items.forEach((item) => this.addItem(item));\n        }\n        else\n        {\n            const child = items[0];\n\n            if (!child.width || !child.height)\n            {\n                console.error('ScrollBox item should have size');\n            }\n\n            child.eventMode = 'static';\n\n            this.list.addChild(child);\n            this.proximityStatusCache.push(false);\n\n            if (!this.options.disableDynamicRendering)\n            {\n                child.renderable = this.isItemVisible(child);\n            }\n        }\n\n        this.resize();\n\n        return items[0];\n    }\n\n    /**\n     * Removes an item from a scrollable list.\n     * @param {number} itemID - id of the item to remove.\n     */\n    removeItem(itemID: number)\n    {\n        this.list.removeItem(itemID);\n        this.proximityStatusCache.splice(itemID, 1);\n        this.resize();\n    }\n\n    /**\n     * Checks if the item is visible or scrolled out of the visible part of the view.* Adds an item to a scrollable list.\n     * @param {Container} item - item to check.\n     * @param padding - proximity padding to consider the item visible.\n     */\n    isItemVisible(item: Container, padding = 0): boolean\n    {\n        const isVertical = this.options.type === 'vertical' || !this.options.type;\n        let isVisible = false;\n        const list = this.list;\n\n        if (isVertical)\n        {\n            const posY = item.y + list.y;\n\n            if (posY + item.height >= -padding && posY <= this.options.height + padding)\n            {\n                isVisible = true;\n            }\n        }\n        else\n        {\n            const posX = item.x + list.x;\n\n            if (posX + item.width >= -padding && posX <= this.options.width + padding)\n            {\n                isVisible = true;\n            }\n        }\n\n        return isVisible;\n    }\n\n    /**\n     * Returns all inner items in a list.\n     * @returns {Array<Container> | Array} - list of items.\n     */\n    get items(): Container[] | []\n    {\n        return this.list?.children ?? [];\n    }\n\n    /**\n     * Set ScrollBox background.\n     * @param {number | string} background - background color or texture.\n     */\n    setBackground(background?: ColorSource)\n    {\n        if (this.background)\n        {\n            this.removeChild(this.background);\n        }\n\n        this.options.background = background;\n\n        this.background = new Graphics();\n\n        this.addChildAt(this.background, 0);\n\n        this.resize();\n    }\n\n    protected addMask()\n    {\n        if (!this.borderMask)\n        {\n            this.borderMask = new Graphics();\n            super.addChild(this.borderMask);\n            this.mask = this.borderMask;\n        }\n\n        this.resize();\n    }\n\n    protected makeScrollable()\n    {\n        if (!this._trackpad)\n        {\n            this._trackpad = new Trackpad({\n                disableEasing: this.options.disableEasing,\n            });\n        }\n\n        this.on('pointerdown', (e: FederatedPointerEvent) =>\n        {\n            this.renderAllItems();\n\n            this.isDragging = 1;\n            this.dragStarTouchPoint = this.worldTransform.applyInverse(e.global);\n\n            this._trackpad.pointerDown(this.dragStarTouchPoint);\n\n            const listTouchPoint = this.list.worldTransform.applyInverse(e.global);\n\n            this.visibleItems.forEach((item) =>\n            {\n                if (item.x < listTouchPoint.x\n                    && item.x + item.width > listTouchPoint.x\n                    && item.y < listTouchPoint.y\n                    && item.y + item.height > listTouchPoint.y)\n                {\n                    this.pressedChild = item;\n                }\n            });\n        });\n\n        this.on('pointerup', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreItemsInteractivity();\n\n            this.pressedChild = null;\n\n            this.stopRenderHiddenItems();\n        });\n\n        this.on('pointerover', () =>\n        {\n            this.isOver = true;\n        });\n\n        this.on('pointerout', () =>\n        {\n            this.isOver = false;\n        });\n\n        this.on('pointerupoutside', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreItemsInteractivity();\n\n            this.pressedChild = null;\n\n            this.stopRenderHiddenItems();\n        });\n\n        this.on('globalpointermove', (e: FederatedPointerEvent) =>\n        {\n            if (!this.isDragging) return;\n\n            const isVertical: boolean = this.options.type !== 'horizontal';\n            const touchPoint = this.worldTransform.applyInverse(e.global);\n\n            if (this.dragStarTouchPoint)\n            {\n                const dragTrashHold = this.options.dragTrashHold ?? 10;\n\n                if (this.options.type === 'horizontal')\n                {\n                    const xDist = touchPoint.x - this.dragStarTouchPoint.x;\n\n                    if (Math.abs(xDist) > dragTrashHold)\n                    {\n                        this.isDragging = 2;\n                    }\n                }\n                else\n                {\n                    const yDist = touchPoint.y - this.dragStarTouchPoint.y;\n\n                    if (Math.abs(yDist) > dragTrashHold)\n                    {\n                        this.isDragging = 2;\n                    }\n                }\n            }\n\n            if (this.dragStarTouchPoint && this.isDragging !== 2) return;\n\n            this._trackpad.pointerMove(touchPoint);\n\n            if (this.pressedChild)\n            {\n                this.revertClick(this.pressedChild);\n                this.pressedChild = null;\n            }\n\n            this.onScroll?.emit(isVertical ? this.scrollY : this.scrollX);\n        });\n\n        document.addEventListener('wheel', this.onMouseScrollBinding, true);\n    }\n\n    protected setInteractive(interactive: boolean)\n    {\n        this.eventMode = interactive ? 'static' : 'auto';\n    }\n\n    protected get listHeight(): number\n    {\n        return this.list.height + this.list.topPadding + this.list.bottomPadding;\n    }\n\n    protected get listWidth(): number\n    {\n        return this.list.width + this.list.leftPadding + this.list.rightPadding;\n    }\n\n    /**\n     * Controls item positions and visibility.\n     * @param force\n     */\n    resize(force = false): void\n    {\n        if (!this.hasBounds) return;\n\n        this.renderAllItems();\n\n        if (\n            this.borderMask\n            && (force\n                || this._dimensionChanged\n                || this.lastWidth !== this.listWidth\n                || this.lastHeight !== this.listHeight)\n        )\n        {\n            if (!this.options.width)\n            {\n                this.__width += this.listWidth;\n            }\n\n            if (!this.options.height)\n            {\n                this.__height += this.listHeight;\n            }\n\n            this.borderMask\n                .clear()\n                .roundRect(\n                    0,\n                    0,\n                    this.__width,\n                    this.__height,\n                    this.options.radius | 0,\n                )\n                .fill(0xff00ff)\n                .stroke(0x0);\n            this.borderMask.eventMode = 'none';\n\n            const color = this.options.background;\n\n            this.background\n                .clear()\n                .roundRect(\n                    0,\n                    0,\n                    this.__width,\n                    this.__height,\n                    this.options.radius | 0,\n                )\n                .fill({\n                    color: color ?? 0x000000,\n                    alpha: color ? 1 : 0.0000001, // if color is not set, set alpha to 0 to be able to drag by click on bg\n                });\n\n            if (this.options.type === 'horizontal')\n            {\n                this.setInteractive(this.listWidth > this.__width);\n            }\n            else\n            {\n                this.setInteractive(this.listHeight > this.__height);\n            }\n\n            this.lastWidth = this.listWidth;\n            this.lastHeight = this.listHeight;\n        }\n\n        if (this._trackpad)\n        {\n            const maxWidth\n                = this.borderMask.width\n                - this.list.width\n                - this.list.leftPadding\n                - this.list.rightPadding;\n\n            const maxHeight\n                = this.borderMask.height\n                - this.list.height\n                - this.list.topPadding\n                - this.list.bottomPadding;\n\n            if (this.options.type === 'vertical')\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n            }\n            else if (this.options.type === 'horizontal')\n            {\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n            else\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n        }\n\n        if (this._dimensionChanged)\n        {\n            this.list.arrangeChildren();\n\n            // Since the scrolling adjustment can happen due to the resize,\n            // we shouldn't update the visible items immediately.\n            this.stopRenderHiddenItems();\n\n            this._dimensionChanged = false;\n        }\n        else this.updateVisibleItems();\n\n        this.lastScrollX = null;\n        this.lastScrollY = null;\n    }\n\n    protected onMouseScroll(event: WheelEvent): void\n    {\n        if (!this.isOver && !this.options.globalScroll) return;\n\n        this.renderAllItems();\n\n        const scrollOnX = this.options.shiftScroll\n            ? (typeof event.deltaX !== 'undefined' || typeof event.deltaY !== 'undefined')\n            : typeof event.deltaX !== 'undefined';\n\n        if (this.options.type === 'horizontal' && scrollOnX)\n        {\n            const delta = this.options.shiftScroll ? event.deltaX : event.deltaY;\n            const targetPos = this.list.x - delta;\n\n            if (this.listWidth < this.__width)\n            {\n                this._trackpad.xAxis.value = 0;\n            }\n            else\n            {\n                const min = this.__width - this.listWidth;\n                const max = 0;\n\n                this._trackpad.xAxis.value = Math.min(max, Math.max(min, targetPos));\n            }\n\n            this.onScroll?.emit(this._trackpad.xAxis.value);\n        }\n        else if (typeof event.deltaY !== 'undefined')\n        {\n            const targetPos = this.list.y - event.deltaY;\n\n            if (this.listHeight < this.__height)\n            {\n                this._trackpad.yAxis.value = 0;\n            }\n            else\n            {\n                const min = this.__height - this.listHeight;\n                const max = 0;\n\n                this._trackpad.yAxis.value = Math.min(max, Math.max(min, targetPos));\n            }\n\n            this.onScroll?.emit(this._trackpad.yAxis.value);\n        }\n\n        this.stopRenderHiddenItems();\n    }\n\n    /** Makes it scroll down to the last element. */\n    scrollBottom()\n    {\n        if (!this.interactive)\n        {\n            this.scrollTop();\n        }\n        else\n        {\n            this.scrollTo(this.list.children.length - 1);\n        }\n    }\n\n    /** Makes it scroll up to the first element. */\n    scrollTop()\n    {\n        this.renderAllItems();\n\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n\n        this.stopRenderHiddenItems();\n    }\n\n    protected renderAllItems()\n    {\n        clearTimeout(this.stopRenderHiddenItemsTimeout);\n        this.stopRenderHiddenItemsTimeout = null;\n\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = true;\n        });\n    }\n\n    protected stopRenderHiddenItems()\n    {\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        if (this.stopRenderHiddenItemsTimeout)\n        {\n            clearTimeout(this.stopRenderHiddenItemsTimeout);\n            this.stopRenderHiddenItemsTimeout = null;\n        }\n\n        this.stopRenderHiddenItemsTimeout = setTimeout(() => this.updateVisibleItems(), 2000);\n    }\n\n    protected updateVisibleItems()\n    {\n        this.visibleItems.length = 0;\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = this.isItemVisible(child);\n            this.visibleItems.push(child);\n        });\n    }\n\n    /**\n     * Scrolls to the element with the given ID.\n     * @param elementID\n     */\n    scrollTo(elementID: number)\n    {\n        if (!this.interactive)\n        {\n            return;\n        }\n\n        const target = this.list.children[elementID];\n\n        if (!target)\n        {\n            return;\n        }\n\n        this.renderAllItems();\n\n        this._trackpad.xAxis.value\n            = this.options.type === 'horizontal'\n                ? this.__width\n                  - target.x\n                  - target.width\n                  - this.list.rightPadding\n                : 0;\n\n        this._trackpad.yAxis.value\n            = !this.options.type || this.options.type === 'vertical'\n                ? this.__height\n                  - target.y\n                  - target.height\n                  - this.list.bottomPadding\n                : 0;\n\n        this.stopRenderHiddenItems();\n    }\n\n    /**\n     * Scrolls to the given position.\n     * @param position - x and y position object.\n     * @param position.x - x position.\n     * @param position.y - y position.\n     */\n    scrollToPosition({ x, y }: Partial<PointData>)\n    {\n        if (x === undefined && y === undefined) return;\n        this.renderAllItems();\n        if (x !== undefined) this.scrollX = -x;\n        if (y !== undefined) this.scrollY = -y;\n        this.stopRenderHiddenItems();\n    }\n\n    /** Gets component height. */\n    override get height(): number\n    {\n        return this.__height;\n    }\n\n    override set height(value: number)\n    {\n        this.__height = value;\n        this._dimensionChanged = true;\n        this.resize();\n        this.scrollTop();\n    }\n\n    /** Gets component width. */\n    override get width(): number\n    {\n        return this.__width;\n    }\n\n    override set width(value: number)\n    {\n        this.__width = value;\n        this._dimensionChanged = true;\n        this.resize();\n        this.scrollTop();\n    }\n\n    override setSize(value: number | Optional<Size, 'height'>, height?: number): void\n    {\n        if (typeof value === 'object')\n        {\n            height = value.height ?? value.width;\n            value = value.width;\n        }\n        else\n        {\n            height = height ?? value;\n        }\n\n        this.__width = value;\n        this.__height = height;\n        this._dimensionChanged = true;\n        this.resize();\n        this.scrollTop();\n    }\n\n    override getSize(out?: Size): Size\n    {\n        out = out || { width: 0, height: 0 };\n        out.width = this.__width;\n        out.height = this.__height;\n\n        return out;\n    }\n\n    /** Gets the current raw scroll position on the x-axis (Negated Value). */\n    get scrollX(): number\n    {\n        return this._trackpad.xAxis.value;\n    }\n\n    /** Sets the current raw scroll position on the x-axis (Negated Value). */\n    set scrollX(value: number)\n    {\n        this._trackpad.xAxis.value = value;\n    }\n\n    /** Gets the current raw scroll position on the y-axis (Negated Value). */\n    get scrollY(): number\n    {\n        return this._trackpad.yAxis.value;\n    }\n\n    /** Sets the current raw scroll position on the y-axis (Negated Value). */\n    set scrollY(value: number)\n    {\n        this._trackpad.yAxis.value = value;\n    }\n\n    protected update()\n    {\n        if (!this.list) return;\n\n        this._trackpad.update();\n\n        const type = this.options.type === 'horizontal' ? 'x' : 'y';\n\n        if (this.list[type] !== this._trackpad[type])\n        {\n            this.list[type] = this._trackpad[type];\n        }\n\n        if (!this.options.disableProximityCheck && (\n            this._trackpad.x !== this.lastScrollX || this._trackpad.y !== this.lastScrollY\n        ))\n        {\n            this.proximityCheckFrameCounter++;\n            if (this.proximityCheckFrameCounter >= (this.options.proximityDebounce ?? 10))\n            {\n                this.items.forEach((item, index) =>\n                {\n                    const inRange = this.isItemVisible(item, this.proximityRange);\n                    const wasInRange = this.proximityStatusCache[index];\n\n                    if (inRange !== wasInRange)\n                    {\n                        this.proximityStatusCache[index] = inRange;\n                        this.onProximityChange.emit({ item, index, inRange });\n                    }\n                });\n                this.lastScrollX = this._trackpad.x;\n                this.lastScrollY = this._trackpad.y;\n                this.proximityCheckFrameCounter = 0;\n            }\n        }\n    }\n\n    /**\n     * Destroys the component.\n     * @param {boolean | DestroyOptions} [options] - Options parameter.\n     * A boolean will act as if all options have been set to that value\n     */\n    override destroy(options?: DestroyOptions | boolean)\n    {\n        this.ticker.remove(this.update, this);\n\n        document.removeEventListener('wheel', this.onMouseScrollBinding, true);\n\n        this.background.destroy();\n        this.list.destroy();\n\n        super.destroy(options);\n    }\n\n    protected restoreItemsInteractivity()\n    {\n        this.interactiveStorage.forEach((element) =>\n        {\n            element.item.eventMode = element.eventMode;\n        });\n\n        this.interactiveStorage.length = 0;\n    }\n\n    protected revertClick(item: Container)\n    {\n        if (item.eventMode !== 'auto')\n        {\n            isMobile.any\n                ? item.emit('pointerupoutside', null)\n                : item.emit('mouseupoutside', null);\n\n            this.interactiveStorage.push({\n                item,\n                eventMode: item.eventMode,\n            });\n\n            item.eventMode = 'auto';\n        }\n\n        // need to disable click for all children too\n        if (item instanceof Container && item.children)\n        {\n            item.children.forEach((child) => this.revertClick(child));\n        }\n    }\n\n    get scrollHeight(): number\n    {\n        return this.list.height;\n    }\n\n    get scrollWidth(): number\n    {\n        return this.list.width;\n    }\n}\n", "import { Container, FillStyleInputs, Graphics, Text } from 'pixi.js';\nimport { Signal } from 'typed-signals';\nimport { FancyButton } from './FancyButton';\nimport { ScrollBox, ScrollBoxOptions } from './ScrollBox';\nimport { PixiTextClass, PixiTextStyle } from './utils/helpers/text';\nimport { getView } from './utils/helpers/view';\n\nconst defaultVisibleItems = 5;\n\ntype Offset = {\n    y: number;\n    x: number;\n};\n\nexport type SelectItemsOptions = {\n    items: string[];\n    backgroundColor: FillStyleInputs\n    width: number;\n    height: number;\n    hoverColor?: FillStyleInputs;\n    textStyle?: PixiTextStyle;\n    TextClass?: PixiTextClass;\n    radius?: number;\n};\n\nexport type SelectOptions = {\n    closedBG: string | Container;\n    openBG: string | Container;\n    textStyle?: PixiTextStyle;\n    TextClass?: PixiTextClass;\n    selected?: number;\n    selectedTextOffset?: { x?: number; y?: number };\n\n    items: SelectItemsOptions;\n\n    scrollBoxOffset?: { x?: number; y?: number };\n    scrollBoxWidth?: number;\n    scrollBoxHeight?: number;\n    scrollBoxRadius?: number;\n\n    visibleItems?: number;\n\n    scrollBox?: ScrollBoxOptions & {\n        offset?: Offset;\n    };\n};\n\n/**\n * Container-based component that gives us a selection dropdown.\n *\n * It is a composition of a {@link Button} and a {@link ScrollBox}.\n * @example\n * new Select({\n *     closedBG: `select_closed.png`,\n *     openBG: `select_open.png`,\n *     textStyle: { fill: 0xffffff, fontSize: 20 },\n *     items: {\n *         items,\n *         backgroundColor: 0x000000,\n *         hoverColor: 0x000000,\n *         width: 200,\n *         height: 50,\n *     },\n *     scrollBox: {\n *         width: 200,\n *         height: 350,\n *         radius: 30,\n *     },\n * });\n */\n\nexport class Select extends Container\n{\n    protected view: Container = new Container();\n    protected openButton!: FancyButton;\n    protected closeButton!: FancyButton;\n    protected openView!: Container;\n    protected scrollBox: ScrollBox;\n\n    /** Selected value ID. */\n    value: number;\n\n    /** Fires when selected value is changed. */\n    onSelect: Signal<(value: number, text: string) => void>;\n\n    constructor(options?: SelectOptions)\n    {\n        super();\n\n        this.addChild(this.view);\n        this.onSelect = new Signal();\n\n        if (options)\n        {\n            this.init(options);\n        }\n    }\n\n    /**\n     * Initiates Select.\n     * @param root0\n     * @param root0.closedBG\n     * @param root0.textStyle\n     * @param root0.items\n     * @param root0.openBG\n     * @param root0.selected\n     * @param root0.selectedTextOffset\n     * @param root0.scrollBox\n     * @param root0.visibleItems\n     * @param root0.TextClass\n     */\n    init({\n        closedBG, textStyle, TextClass, items, openBG, selected, selectedTextOffset, scrollBox, visibleItems\n    }: SelectOptions)\n    {\n        TextClass = TextClass ?? Text;\n        if (this.openView && this.openView !== openBG)\n        {\n            this.view.removeChild(this.openView);\n        }\n\n        // openButton\n        if (!this.openButton)\n        {\n            this.openButton = new FancyButton({\n                defaultView: getView(closedBG),\n                text: new TextClass({ text: items?.items ? items.items[0] : '', style: textStyle }),\n                textOffset: selectedTextOffset\n            });\n            this.openButton.onPress.connect(() => this.toggle());\n            this.addChild(this.openButton);\n        }\n        else\n        {\n            this.openButton.defaultView = getView(closedBG);\n            this.openButton.textView = new TextClass({ text: items?.items ? items.items[0] : '', style: textStyle });\n\n            this.openButton.textOffset = selectedTextOffset;\n        }\n\n        // openView\n        if (this.openView !== openBG)\n        {\n            this.openView = getView(openBG);\n            this.view.visible = false;\n            this.view.addChild(this.openView);\n        }\n\n        // closeButton\n        if (!this.closeButton)\n        {\n            this.closeButton = new FancyButton({\n                defaultView: new Graphics()\n                    .rect(0, 0, this.openButton.width, this.openButton.height)\n                    .fill({ color: 0x000000, alpha: 0.00001 }),\n                text: new TextClass({ text: items?.items ? items.items[0] : '', style: textStyle }),\n                textOffset: selectedTextOffset\n            });\n            this.closeButton.onPress.connect(() => this.toggle());\n            this.view.addChild(this.closeButton);\n        }\n        else\n        {\n            this.closeButton.defaultView = new Graphics()\n                .rect(0, 0, this.openButton.width, this.openButton.height)\n                .fill({ color: 0x000000, alpha: 0.00001 });\n\n            this.closeButton.textView = new TextClass({ text: items?.items ? items.items[0] : '', style: textStyle });\n\n            this.openButton.textOffset = selectedTextOffset;\n        }\n\n        // ScrollBox\n        if (!this.scrollBox)\n        {\n            this.scrollBox = new ScrollBox();\n\n            this.view.addChild(this.scrollBox);\n        }\n        else\n        {\n            this.scrollBox.removeItems();\n        }\n\n        this.scrollBox.init({\n            type: 'vertical',\n            elementsMargin: 0,\n            width: this.openButton.width,\n            height: this.openButton.height * (visibleItems ?? defaultVisibleItems),\n            radius: 0,\n            padding: 0,\n            ...scrollBox\n        });\n\n        this.scrollBox.y = this.openButton.height;\n\n        if (scrollBox?.offset)\n        {\n            this.scrollBox.x = scrollBox.offset.x ?? 0;\n            this.scrollBox.y += scrollBox.offset.y ?? 0;\n        }\n\n        this.addItems(items, selected);\n    }\n\n    /**\n     * Adds items to the dropdown.\n     * @param items\n     * @param selected\n     */\n    addItems(items: SelectItemsOptions, selected = 0)\n    {\n        this.convertItemsToButtons(items).forEach((button, id) =>\n        {\n            const text = button.text;\n\n            if (id === selected)\n            {\n                this.openButton.text = text;\n                this.closeButton.text = text;\n            }\n\n            button.onPress.connect(() =>\n            {\n                this.value = id;\n                this.onSelect.emit(id, text);\n                this.openButton.text = text;\n                this.closeButton.text = text;\n                this.close();\n            });\n\n            this.scrollBox.addItem(button);\n        });\n    }\n\n    /**\n     * Remove items from the dropdown.\n     * @param itemID - Item to remove (starting from 0).\n     */\n    removeItem(itemID: number)\n    {\n        this.scrollBox.removeItem(itemID);\n    }\n\n    /** Toggle the select state (open if closed, closes - id open). */\n    toggle()\n    {\n        this.view.visible = !this.view.visible;\n        this.openButton.visible = !this.openButton.visible;\n    }\n\n    /** Show dropdown. */\n    open()\n    {\n        this.view.visible = true;\n        this.openButton.visible = false;\n    }\n\n    /** Hide dropdown. */\n    close()\n    {\n        this.view.visible = false;\n        this.openButton.visible = true;\n    }\n\n    protected convertItemsToButtons({\n        items,\n        backgroundColor,\n        hoverColor,\n        width,\n        height,\n        textStyle,\n        TextClass,\n        radius\n    }: SelectItemsOptions): FancyButton[]\n    {\n        TextClass = TextClass ?? Text;\n        const buttons: FancyButton[] = [];\n\n        items.forEach((item) =>\n        {\n            const defaultView = new Graphics().roundRect(0, 0, width, height, radius).fill(backgroundColor);\n\n            const color = hoverColor ?? backgroundColor;\n            const hoverView = new Graphics().roundRect(0, 0, width, height, radius).fill(color);\n\n            const text = new TextClass({ text: item, style: textStyle });\n\n            const button = new FancyButton({ defaultView, hoverView, text });\n\n            buttons.push(button);\n        });\n\n        return buttons;\n    }\n}\n", "import { Container, FederatedPointerEvent, Optional, Size } from 'pixi.js';\nimport { Signal } from 'typed-signals';\nimport { BaseSliderOptions, SliderBase } from './SliderBase';\n\nimport type { DragObject } from './utils/HelpTypes';\n\nexport type SliderOptions = BaseSliderOptions & {\n    slider: Container | string;\n    step?: number;\n    value?: number;\n};\n\n/**\n * Creates a slider to select a single value.\n * @example\n * new Slider({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     slider: 'slider.png',\n *     min: 0,\n *     max: 100,\n *     value: 50,\n * });\n *\n * singleSlider.onChange.connect((value) => {\n *     console.log(`Slider changed to ${value}`);\n * });\n */\nexport class Slider extends SliderBase\n{\n    protected sliderOptions: SliderOptions;\n\n    /** Fires when value is changing, on every move of slider. */\n    onUpdate: Signal<(value: number) => void> = new Signal();\n\n    /** Fires when value changed, only when slider is released. */\n    onChange: Signal<(value: number) => void> = new Signal();\n\n    constructor(options: SliderOptions)\n    {\n        super({\n            slider1: options.slider,\n            value1: options.value,\n            ...options\n        });\n\n        this.sliderOptions = options;\n\n        // Avoid zero value\n        this.step = options.step || 1;\n\n        this.value = options.value ?? this.min;\n        this.updateSlider();\n    }\n\n    /** Return selected value. */\n    get value(): number\n    {\n        return this._value1;\n    }\n\n    /** Set selected value. */\n    set value(value: number)\n    {\n        if (value === this._value1) return;\n\n        if (value < this.min) value = this.min;\n        if (value > this.max) value = this.max;\n\n        this._value1 = value;\n\n        this.updateSlider();\n\n        this.onUpdate?.emit(this.value);\n    }\n\n    override set max(value: number)\n    {\n        super.max = value;\n        this.updateSlider();\n    }\n\n    override get max(): number\n    {\n        return super.max;\n    }\n\n    override set min(value: number)\n    {\n        super.min = value;\n        this.updateSlider();\n    }\n\n    override get min(): number\n    {\n        return super.min;\n    }\n\n    override set step(value: number)\n    {\n        super.step = value;\n        this.updateSlider();\n    }\n\n    override get step(): number\n    {\n        return super.step;\n    }\n\n    /** Set slider instance ot texture. */\n    // eslint-disable-next-line accessor-pairs\n    set slider(value: Container | string)\n    {\n        this.slider1 = value;\n        this.updateSlider();\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        super.update(event);\n\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n        const positionRatio = x / (this.bg?.width || 1);\n        const rawValue = this.min + (positionRatio * (this.max - this.min));\n\n        // Snap the raw value to the nearest step\n        this.value = Math.round(rawValue / this.step) * this.step;\n    }\n\n    protected override change()\n    {\n        this.onChange?.emit(this.value);\n    }\n\n    protected updateSlider()\n    {\n        this.progress = ((this.value ?? this.min) - this.min) / (this.max - this.min) * 100;\n\n        this._slider1.x = ((this.bg?.width / 100) * this.progress) - (this._slider1.width / 2);\n        this._slider1.y = this.bg?.height / 2;\n\n        if (this.sliderOptions?.showValue)\n        {\n            this.value1Text.text = `${Math.round(this.value)}`;\n\n            const sliderPosX = this._slider1.x + (this._slider1.width / 2);\n            const sliderPosY = this._slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.sliderOptions.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.sliderOptions.valueTextOffset?.y ?? 0);\n        }\n    }\n\n    /**\n     * Sets width of a Sliders background and fill.\n     * If nineSliceSprite is set, then width will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then width will control components width as Container.\n     * @param value - Width value.\n     */\n    override set width(value: number)\n    {\n        super.width = value;\n\n        this.updateSlider();\n    }\n\n    /** Gets width of a Slider. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a Sliders background and fill.\n     * If nineSliceSprite is set, then height will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then height will control components height as Container.\n     * @param value - Height value.\n     */\n    override set height(value: number)\n    {\n        super.height = value;\n\n        this.updateSlider();\n    }\n\n    /** Gets height of a Slider. */\n    override get height(): number\n    {\n        return super.height;\n    }\n\n    override setSize(value: number | Optional<Size, 'height'>, height?: number): void\n    {\n        super.setSize(value, height);\n        this.updateSlider();\n    }\n}\n"],
  "mappings": "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",
  "names": ["__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "PixiNineSliceSprite", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField", "__publicField"]
}
